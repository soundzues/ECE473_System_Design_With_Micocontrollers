%!PS-Adobe-3.0
%%Title: lab5.c
%%For: ECE473
%%Creator: a2ps version 4.14
%%CreationDate: Fri Dec  6 14:43:36 2019
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 7
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed strings
% Version 1.2 1/31/1990
% Original Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.493857 def
/cw 4.496314 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   522.321860 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(// Aditya Kothari) c n
(// Lab 5) N
(// 12/6/2019) N
() p n
(#include) K
( <avr/io.h>) p n
(#include) K
( <util/delay.h>) p n
(#include) K
( <avr/interrupt.h>) p n
(#define) K
( F_CPU 16000000) p n
(#include) K
( <stdlib.h>) p n
(#include) K
( ") p
(hd44780.h) str
(") p n
(#include) K
( ") p
(lm73_functions.h) str
(") p n
(#include) K
( ") p
(twi_master.h) str
(") p n
(#include) K
( ") p
(uart_functions.h) str
(") p n
(#include) K
( <stdio.h>) p n
() N
(//***********************************************************************) c n
(//                            spi_init                               ) N
(//**********************************************************************) N
() p n
(//GLOBAL VARS:) c n
(uint8_t data = 0x00; ) p
(//hold data) c n
(uint8_t a_past = 0x03; ) p
(// a of encoder 1 to be high in past) c n
(uint8_t b_past = 0x03; ) p
(// b of encoder 1 to be high in past) c n
(uint8_t a_cur = 0x00; ) p
(// current state of a) c n
(uint8_t b_cur = 0x00; ) p
(// current state of b) c n
(int) k
(8_t direc = 0x00; ) p
(//will hold the sign) c n
(uint8_t x = 0; ) p
(//mode to be selectedi) c n
(uint8_t flag = 0;) p n
(uint8_t temp_0 = 1;) N
(uint8_t c_past = 0x03;) S
(// b of encoder 2 to be high in past) c n
(uint8_t d_past = 0x03;) p
(// d of encoder 2 to be high in past) c n
(uint8_t c_cur = 0x00; ) p
(// current state of c) c n
(uint8_t d_cur = 0x00; ) p
(// current state of d) c n
(uint8_t flag_min = 0; ) p
(//keep tracks of mins) c n
(uint16_t count_7ms = 0; ) p
(//keep track of isr) c n
(uint8_t flag_sec = 0; ) p
(//keeps track of sec) c n
(uint8_t flag_enc = 0; ) p
(//enables/disables encoder) c n
(uint8_t flag_alarm = 0; ) p
(//enables alarm mode) c n
(uint8_t flag_set_alarm = 0; ) p
(//confirms user choice to set alarm) c n
(uint8_t flag_snooze = 0; ) p
(//alows user to snoze alarm) c n
(uint8_t flag_disable_alarm = 0; ) p
(//allows user to turn off alarm) c n
(uint8_t write = 0;) p n
(uint16_t ADC_val = 0;) N
(uint8_t flag_ringer = 0; ) S
(//if set causes the alarm to ring) c n
(uint16_t count_10_sec = 1;) p n
(char) k
(    lcd_string_array[16];  ) p
(//holds a string to refresh the LCD) c n
(uint8_t i;                     ) p
(//general purpose index) c n
(extern) K
( uint8_t lm73_wr_buf[];) p n
(extern) K
( uint8_t lm73_rd_buf[];) p n
(uint8_t rcv_flag = 0;) N
(char) k
( rx_char;) p n
(char) k
( buff_r[16];) p n
(uint8_t rcv_rdy;) N
(uint8_t j = 0;) N
(char) k
(    lcd_string_array[16]={') p
( ) str
(',') p
(L) str
(',') p
(:) str
(',') p
(x) str
(',') p
(x) str
(',') p
( ) str
(',') p
( ) str
(',') p
(R) str
(',') p
(:) str
(',') p
(x) str
(',') p
(x) str
(',') p
( ) str
(',') p
(A) str
(',') p
(:) str
() p n
(',') S
(N) str
(',') p
( ) str
('};  ) p
(//holds a string to refresh the LCD) c n
(//char    lcd_string_array2[16]={' ','A','L','A','R','M',':','N',' ',' ',' ',' ') N
(,' ',' ',' ',' '};  //holds a string to refresh the LCD) N
(uint8_t l = 0;) p n
(uint8_t m = 0;) N
() N
(//Lab2: Seven seg stuff:) c n
(//Array to hold different digits to turn on) N
(//                  Digit: 0     1    2      3    4) N
(//uint8_t digit_select[] = {0x00, 0x10, 0x30, 0x40};) N
() p n
(uint8_t digit_select[] = {0x00, 0x10, 0x20, 0x30, 0x40};) N
() N
(//uint8_t digit_select[5];) c n
(lab5.c) (Page 1/13) (Dec 06, 19 14:42) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(//Array to hold different state of the digits) c n
() p n
(uint8_t segment_select[5]; ) S
(//digit 4) c n
() p n
(//decimal to 7-segment LED display encodings, logic "0" turns on segment) c n
(//0          1           2           3           4           5           6      ) N
(     7           8           9) N
(uint8_t dec_to_7seg[10]= {0b00000011, 0b10011111, 0b00100101, 0b00001101, 0b1001) p n
(1001, 0b01001001, 0b01000001, 0b00011111, 0b00000001, 0b00001001};) N
() N
() N
(//******************************************************************************) c n
() p n
(//******************************************************************************) c n
(*****) N
(//                                   segment_sum                                ) N
(    ) N
(//takes a 16-bit binary input value and places the appropriate equivalent 4 digi) N
(t ) N
(//BCD segment code in the array segment_data for display.                       ) N
(//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|) N
() p n
(void) k
( segsum\() p
(int) k
(16_t sum, ) p
(int) k
(16_t alarm_sum\) {) p n
() S 8 T (uint16_t temp = sum;) N
() N
() S 8 T () S
(if) K
(\(flag_alarm == 1\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (temp = alarm_sum;) N
() S 8 T (}) N
() N
() S 8 T () S
(//extract out hours and mins) c n
() p 8 T (uint16_t hours = temp/60;) N
() S 8 T (uint16_t mins =  temp%60;) N
() N
() S 8 T () S
(//determing digits for hours) c n
() p 8 T (uint8_t tens_h = hours/10;) N
() S 8 T (uint8_t units_h = hours%10;) N
() N
() S 8 T () S
(//determing digits for minutes) c n
() p 8 T (uint8_t tens_m = mins/10;) N
() S 8 T (uint8_t units_m = mins%10;) N
() N
() S 8 T () S
(//break up decimal sum into 4 digit-segments) c n
() p 8 T (segment_select[0] = dec_to_7seg[units_m]; ) S
(//digit 0) c n
() p 8 T (segment_select[1] = dec_to_7seg[tens_m]; ) S
(//digit 1) c n
() p n
() S 8 T () S
(//set it only once at the beginging  ) c n
() p 8 T () S
(if) K
(\(flag_sec == 0\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (segment_select[2] = 0x3F;) N
() S 8 T (}) N
() N
() S 8 T (segment_select[3] = dec_to_7seg[units_h]; ) S
(//digit 2) c n
() p 8 T (segment_select[4] = dec_to_7seg[tens_h]; ) S
(//digit 3) c n
() p n
() S 8 T () S
(/*) c n
() S 8 T (   if\(flag_sec == 1\)) N
() S 8 T (   {) N
() S 8 T (   segment_select[2] = 0xFF;) N
() S 8 T (   flag_sec = 0;) N
() S 8 T (   }*/) N
() p n
() S 8 T () S
(if) K
(\(hours < 10\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (segment_select[4] = dec_to_7seg[0];) N
() S 8 T (}) N
() S 8 T () S
(if) K
(\(mins < 10\)) p n
() S 8 T ({) N
(lab5.c) (Page 2/13) (Dec 06, 19 14:42) title
border
grestore
(Printed by ECE473) rhead
(lab5.c) (1/7) (Friday December 06, 2019) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T (segment_select[1] = dec_to_7seg[0];) N
() S 8 T (}) N
() N
() N
(}) S
(//segment_sum) c n
() p n
() N
(//******************************************************************************) c n
(//                            chk_buttons                                      ) N
(//Checks the state of the button number passed to it. It shifts in ones till   ) N
(//the button is pushed. Function returns a 1 only once per debounced button    ) N
(//push so a debounce and toggle function can be implemented at the same time.  ) N
(//Adapted to check all buttons from Ganssel's "Guide to Debouncing"            ) N
(//Expects active low pushbuttons on PINA port.  Debounce time is determined by ) N
(//external loop delay times 12. ) N
(//) N
(int) k
(8_t chk_buttons\(uint8_t button\)) p n
({) N
() S 8 T () S
(static) K
( uint16_t state[8] = {0}; ) p
(//holds present state) c n
() p 8 T (state[button] = \(state[button] << 1\) | \(! bit_is_clear\(PINA, button\)\) | ) N
(0xE000;) N
() S 8 T () S
(if) K
( \(state[button] == 0xF000\) ) p
(return) K
( 1;) p n
() S 8 T () S
(return) K
( 0;) p n
(}) N
() N
() N
() N
(//******************************************************************************) c n
(*) N
(//) S 8 T () S 16 T () S 24 T (     spi_init) N
(//enabling SPI and master mode. Selecting double speed of operation) N
(//) N
(void) k
( spi_init\() p
(void) k
(\){) p n
() N
() N
() S 8 T (DDRB  = 0xF7; ) S
(//output mode for MOSI, SCLK, MISO set to input) c n
() p n
() S 8 T (asm ) S
(volatile) K
( \(") p
(nop) str
("\);) p n
() S 8 T (asm ) S
(volatile) K
( \(") p
(nop) str
("\);) p n
() N
() S 8 T (SPCR  = \(1<<SPE\)|\(1<<MSTR\); ) S
(//Enable SPI,master mode) c n
() p n
() S 8 T (SPSR  |= 0x01; ) S
(//choose double speed operation) c n
(}) p
(//spi_init) c n
() p n
(//******************************************************************************) c n
(**) N
(//) S 8 T () S 16 T () S 24 T () S 32 T (spi_read) N
(//Getting rotation direction data from encoder about by manipulating SH/LD and c) N
(loc//k INHABIT) N
(//) N
() p n
(int) k
(8_t spi_read\(\)) p n
({) N
() N
() S 8 T (PORTE |= \(1<<PE7\); ) S
(//CLOCK INH HIGH) c n
() p n
() S 8 T (asm ) S
(volatile) K
( \(") p
(nop) str
("\);) p n
() S 8 T (asm ) S
(volatile) K
( \(") p
(nop) str
("\);) p n
() N
() S 8 T (PORTE &= \(1<<PE7\) | \(0<<PE6\); ) S
(//load parallel data) c n
() p n
() S 8 T (asm ) S
(volatile) K
( \(") p
(nop) str
("\);) p n
() S 8 T (asm ) S
(volatile) K
( \(") p
(nop) str
("\);) p n
() N
() S 8 T (PORTE |= \(1<<PE6\); ) S
(//shift data) c n
() p n
() S 8 T (PORTE &= \(1 <<PE6\) | \(0<<PE7\); ) S
(//CLOCK INH low) c n
() p n
(lab5.c) (Page 3/13) (Dec 06, 19 14:42) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (SPDR = 0X00; ) S
(//clear data register) c n
() p 8 T () S
(while) K
( \(bit_is_clear\(SPSR, 7\)\) {} ) p 48 T () S
(//spin till SPI data has been re) c n
(ad ) N
() p n
() S 8 T () S
(return) K
( SPDR;) p n
(}) N
() N
(//******************************************************************************) c n
(**) N
(//) S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (SPI Write) N
(//Displays mode of opereation e.g: mode 1 \(x = 1\) will increment count by 2.) N
(//Sending mode of operation from Atmega \(Push Buttons\) to Bargraph) N
() p n
(void) k
( spi_write\(\)) p n
({) N
() N
() S 8 T (SPDR = x;) S 24 T () S 32 T () S
(//send mode to the display ) c n
() p 8 T () S
(while) K
( \(bit_is_clear\(SPSR, 7\)\) {} ) p 48 T () S
(//spin till SPI data has been se) c n
(nt ) N
() p n
() S 8 T (PORTB |= 0x01;) S 24 T (            ) S 40 T () S
(//send rising edge to regclk on HC595 ) c n
() p n
() S 8 T (PORTB &= 0xFE;) S 24 T (           ) S 40 T () S
(//send falling edge to regclk on HC595) c n
(}) p n
() N
(//Interrupt vector) c n
(ISR\(TIMER0_OVF_vect\)) p n
({) N
() S 8 T () S
(//if snoze flag count for 10 sec) c n
() p 8 T () S
(if) K
(\(flag_snooze == 1\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (count_10_sec++;) S 32 T () N
() S 8 T (}) N
() N
() N
() S 8 T (count_7ms++;) N
() N
() S 8 T () S
(//keep track of half sec) c n
() p 8 T () S
(if) K
(\(\(count_7ms % 128\) == 0\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (segment_select[2] ^= 0xC0;) N
() S 8 T () S 16 T (flag_sec = 1;) N
() S 8 T () S 16 T () S
(//) c 24 T (_delay_ms\(5\);) N
() p 8 T () S 16 T (rcv_flag = 1;) N
() S 8 T (}) N
(/*) c n
() S 8 T (if\(\(count7_ms % 1280\) == 0\)) N
() S 8 T ({) N
() S 8 T () S 16 T (rcv_flag = 1;) N
() S 8 T (}*/) N
() p n
() S 8 T () S
(//keep track of 10 sec for sonooze) c n
() p 8 T () S
(if) K
(\(\(count_10_sec % 1280\) == 0\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(//play alarm ) c n
() p 8 T () S 16 T (flag_ringer = 1;) N
() N
() S 8 T () S 16 T () S
(//turn off snozee flag) c n
() p 8 T () S 16 T (flag_snooze = 0;) N
() N
() S 8 T () S 16 T () S
(//reset the counter to 1;) c n
() p 8 T () S 16 T (count_10_sec = 1;) N
() N
() S 8 T () S 16 T () S
(//) c 24 T (_delay_ms\(5\);) N
() p 8 T (}) N
() N
() S 8 T () S
(//keep track of min) c n
() p 8 T () S
(if) K
(\(\(count_7ms % 7680\) == 0\)) p n
() S 8 T ({) N
(lab5.c) (Page 4/13) (Dec 06, 19 14:42) title
border
grestore
(Printed by ECE473) rhead
(lab5.c) (2/7) (Friday December 06, 2019) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T (flag_min = 1;) N
() S 8 T (}) N
() N
() S 8 T (data = spi_read\(\); ) S
(//read data from encoder) c n
() p n
() S 8 T (uint8_t button; ) S
(//var to hold button) c n
() p n
() S 8 T (uint8_t temp_pb;) N
() N
() S 8 T (temp_pb = PORTB;) N
() N
() S 8 T () S
(//Enable Tristate) c n
() p 8 T (PORTB |= 0X70;) N
() N
() N
() S 8 T (asm ) S
(volatile) K
( \(") p
(nop) str
("\);) p n
() S 8 T (asm ) S
(volatile) K
( \(") p
(nop) str
("\);) p n
() N
() S 8 T () S
(//checking for button presses) c n
() p 8 T () S
(for) K
(\(button = 1; button < 6; button++\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(if) K
(\(chk_buttons\(button\)\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T () S
(//if button pressed following mode is selected) c n
() p 8 T () S 16 T () S 24 T () S
(//x == mode) c n
() p 8 T () S 16 T () S 24 T (x ^= button;) N
() N
() S 8 T () S 16 T () S 24 T (_delay_ms\(2\);) N
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T () N
() S 8 T () S 16 T () S
(//button 1: Change time mode ) c n
() p 8 T () S 16 T () S
(if) K
(\(x == 0x01\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T () S
(//enable encoder) c n
() p 8 T () S 16 T () S 24 T (flag_enc = 1;) N
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T () S
(//button 2: Alarm mode ) c n
() p 8 T () S 16 T () S
(else) K
( ) p
(if) K
(\(x == 0x02\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (flag_alarm = 1;) N
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T () S
(//button 3: allows user to set alarm) c n
() p 8 T () S 16 T () S
(else) K
( ) p
(if) K
(\(x == 0x03\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (flag_set_alarm = 1;) N
() S 8 T () S 16 T () S 24 T () N
() S 8 T () S 16 T () S 24 T () S
(//send alarm armed message to LCD) c n
(//) S 8 T () S 16 T () S 24 T (clear_display\(\);) N
() p 8 T () S 16 T () S
(//) c 24 T (string2lcd\("Alarm SET"\);) N
() p 8 T () S 16 T () S 24 T () N
() S 8 T () S 16 T () S 24 T (lcd_string_array[14] = ') S
(Y) str
(';) p n
() S 8 T () S 16 T () S 24 T () S
(//delay) c n
() p 8 T () S 16 T () S 24 T (_delay_ms\(2\);) N
() S 8 T () S 16 T () S 24 T () N
() S 8 T () S 16 T () S 24 T () S
(//turn off button) c n
() p 8 T () S 16 T () S 24 T (x = 0x00;) N
() S 8 T () S 16 T (}) S 24 T () N
() S 8 T () S 16 T () S
(//button 4: allows user to snooze \(0x04\)) c n
() p 8 T () S 16 T () S
(//will reset the set_alarm flag) c n
() p 8 T () S 16 T () S
(//add alarm count + 1) c n
() p 8 T () S 16 T () S
(else) K
( ) p
(if) K
(\(x == 0x04\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S
(//) c 16 T () S 24 T (if\(flag_set_alarm == 1\)) N
() p 8 T () S
(//) c 16 T () S 24 T ({) S 32 T () N
() p 8 T () S 16 T () S 24 T () S 32 T () S
(//ringer is off) c n
() p 8 T () S 16 T () S 24 T () S 32 T (flag_ringer = 0;) N
() N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(//set off 10 sec counter) c n
() p 8 T () S 16 T () S 24 T () S 32 T (flag_snooze = 1;) N
(lab5.c) (Page 5/13) (Dec 06, 19 14:42) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(//delay) c n
() p 8 T () S 16 T () S 24 T () S 32 T (_delay_ms\(2\);) N
() S 8 T () S 16 T () S 24 T () N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(//turn off the button) c n
() p 8 T () S 16 T () S 24 T () S 32 T (x = 0x00;) N
() S 8 T () S
(//) c 16 T () S 24 T (}) N
() p 8 T () S 16 T (}) N
() S 8 T () S 16 T () S
(//button 6: to turn of allarm function) c n
() p 8 T () S 16 T () S
(else) K
( ) p
(if) K
(\(x == 0x05\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S
(//) c 24 T (flag_disable_alarm = 1;) N
() p n
() S 8 T () S 16 T () S 24 T () S
(//turn off ringer) c n
() p 8 T () S 16 T () S 24 T (flag_ringer = 0;) N
() S 8 T () S 16 T () S 24 T () N
() S 8 T () S 16 T () S 24 T () S
(//turn off allarm) c n
() p 8 T () S 16 T () S 24 T (flag_set_alarm = 0;) N
() S 8 T () S 16 T () S 24 T () N
() S 8 T () S 16 T () S 24 T () S
(//turn off snooze) c n
() p 8 T () S 16 T () S 24 T (flag_snooze = 0;) N
() N
() S 8 T () S 16 T () S 24 T () S
(//clear display) c n
() p 8 T () S 16 T () S 24 T () S
(//clear_display\(\);) c n
() p 8 T () S 16 T () S 24 T (lcd_string_array[14] = ') S
(N) str
(';) p n
() N
() S 8 T () S 16 T () S 24 T () S
(//turn off the button:) c n
() p 8 T () S 16 T () S 24 T (x = 0x00;) N
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T () S
(else) K n
() p 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T () S
(//disable encoder) c n
() p 8 T () S 16 T () S 24 T (flag_enc = 0;) N
() N
() S 8 T () S 16 T () S 24 T () S
(//disable alarm flag) c n
() p 8 T () S 16 T () S 24 T (flag_alarm = 0;) N
() S 8 T () S 16 T (}) N
() S 8 T (}) N
() N
() S 8 T () S
(//Disable Tristate, restore previous state) c n
() p 8 T (PORTB = temp_pb;) N
() N
() S 8 T (asm ) S
(volatile) K
( \(") p
(nop) str
("\);) p n
() S 8 T (asm ) S
(volatile) K
( \(") p
(nop) str
("\);) p n
() N
() S 8 T (spi_write\(\); ) S
(//write data to bar graph) c n
() p n
(}) N
() N
() N
(//Encoder Data Direction:) c n
(int) k
(8_t encoder_direction\(\)) p n
({) N
() S 8 T () S
(int) k
(8_t var = 0; ) p
(//will hold the sign) c n
() p 8 T () S
(int) k
(8_t flag_1 = 0; ) p
(//if flag 1 is set it will not check encoder 2) c n
() p n
() N
() S 8 T () S
(//break the data) c n
() p 8 T (a_cur = data & 0x01; ) S
(//extract out a) c n
() p 8 T (b_cur = \(data>>1\) & 0x01; ) S
(//extract out b) c n
() p 8 T (c_cur = \(data>>2\) & 0x01; ) S
(//extract c) c n
() p 8 T (d_cur = \(data>>3\) & 0x01; ) S
(//extract d) c n
() p n
() N
() S 8 T () S
(//Encoder 1) c n
() p 8 T () S
(//) c n
() p 8 T () S
(//check for different states to get the direction) c n
() p 8 T () S
(//if past and present states were same no need to increment count) c n
() p 8 T () S
(//var = 0 => no change, var = 1 => increment, car = -1 => decrement) c n
(lab5.c) (Page 6/13) (Dec 06, 19 14:42) title
border
grestore
(Printed by ECE473) rhead
(lab5.c) (3/7) (Friday December 06, 2019) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (7-8) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S
(//sets flag_1 if it detects change of state in encoder 1) c n
() p 8 T () S
(//) c n
() p 8 T () S
(if) K
(\(\(\(a_cur == a_past\) && \(b_cur == b_past\)\) || \(\(c_cur == c_past\) && \(d_) p n
(cur == d_past\)\)\)) N
() S 8 T ({) N
() S 8 T () S 16 T (var = 0;) N
() S 8 T (}) N
() N
() S 8 T () S
(if) K
(\(a_past == a_cur\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(if) K
(\(\(a_cur == 0\) && \(b_past > b_cur\)\){  var = 1; flag_1 = 1;} ) p
(//C) c n
(W) N
() p 8 T (} ) N
() S 8 T () S
(if) K
(\(\(a_past < a_cur\)&&\(b_past | b_cur\) == 1\){  var = -1; flag_1 = 1;} ) p
(//c) c n
(cw ) N
() p n
() S 8 T () S
(//update the past states) c n
() p 8 T (a_past = a_cur;) N
() S 8 T (b_past = b_cur;) N
() N
() N
() S 8 T () S
(//Encoder 2) c n
() p 8 T () S
(//) c n
() p 8 T () S
(//check for different states to get the direction) c n
() p 8 T () S
(//if past and present states were same no need to increment count) c n
() p 8 T () S
(//var = 0 => no change, var = 1 => increment, car = -1 => decrement) c n
() p 8 T () S
(//if flag_1 set won't check encoder 2's state) c n
() p 8 T () S
(//) c n
() p 8 T () S
(if) K
(\(flag_1 == 0\)) p n
() S 8 T ({) N
() N
() S 8 T () S 16 T () S
(if) K
(\(c_past == c_cur\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T () S
(if) K
(\(\(c_cur == 0\) && \(d_past > d_cur\)\){  var = 1;} ) p
(//CW) c n
() p 8 T () S 16 T (}) N
() S 8 T () S 16 T () S
(if) K
(\(\(c_past < c_cur\)&&\(d_past | d_cur\) == 1\){  var = -1;} ) p
(//ccw ) c n
() p n
() S 8 T () S 16 T () S
(//update the past states) c n
() p 8 T () S 16 T (c_past = c_cur;) N
() S 8 T () S 16 T (d_past = d_cur;) N
() S 8 T (}) N
() N
() S 8 T () S
(return) K
( var;) p n
(}) N
() N
(//Timer Counter 0 setup running clock) c n
(void) k
( timer0_init\(\)) p n
({) N
() S 8 T (ASSR |= \(1<<AS0\); ) S
(//run off external 32khz osc \(TOSC\)) c n
() p n
() S 8 T (TIMSK |= \(1<<TOIE0\); ) S
(//Enable interrupt) c n
() p n
() S 8 T (TCCR0 = \(1<<CS00\); ) S
(// No Prescale) c n
(}) p n
() N
(//Timer to create the PWM signal) c n
(void) k
( timer2_init\(\)) p n
({) N
() S 8 T (TCCR2 |= \(1<<WGM20\) | \(1<<WGM21\) | \(1<<COM21\) | \(1<<CS20\); ) S
(//PWM mode, C) c n
(lear on compare match, clock I/O) N
(}) p n
() N
(//TImer to create frequency for tone) c n
(void) k
( timer1_init\(\)) p n
({) N
() S 8 T (TCCR1A = 0x00;                  ) S
(//Normal mode operation) c n
() p n
(  ) S 8 T (TCCR1B = \(1<<WGM12\) | \(1<<CS11\);   ) S
(//use OCR1A as source for TOP, use cl) c n
(k/1) N
(lab5.c) (Page 7/13) (Dec 06, 19 14:42) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(  ) S 8 T (TCCR1C = 0x00;                          ) S
(//no forced compare) c n
() p n
(  ) S 8 T (OCR1A = 0x0269; ) S
(//top value) c n
() p n
(  ) S 8 T (TIMSK |= \(1<<OCIE1A\); ) S
(//enable interrupt) c n
(}) p n
() N
(//Timer to create volume signal) c n
(void) k
( timer3_init\(\)) p n
({) N
() S 8 T (TCCR3A |= \(1<<COM3A1\) | \(1<<COM3A0\) | \(1<<WGM31\);) S
(//initialize timer3 for) c n
( vol) N
(        TCCR3B |= \(1<<WGM33\) | \(1<<WGM32\) | \(1<<CS30\);   ) p
(//control) c n
(        TCCR3C = 0x00;) p n
(        OCR3A = 0x6000;) N
(        ICR3 = 0xF000;) N
() N
(}) N
() N
(ISR\(TIMER1_COMPA_vect\)) N
({) N
() S 8 T () S
(//toggle port d to genrate anoying tone) c n
() p 8 T () S
(if) K
(\(flag_ringer == 1\)) p n
() S 8 T ({) N
(        ) S 16 T (PORTD ^= 0x80;) N
() S 8 T (}) N
() S 8 T () S
(if) K
(\(flag_ringer == 0\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(//testing delay if it fixes speaker) c n
(//) S 8 T () S 16 T (asm volatile \("nop"\);) N
() p 8 T (}) N
(}) N
() N
() N
() N
(//ADC init) c n
(void) k
( ADC_init\(\)) p n
({) N
() S 8 T (DDRF  &= ~\(_BV\(PF7\)\); ) S
(//make port F bit 7 is ADC input  ) c n
() p 8 T (PORTF &= ~\(_BV\(PF7\)\);  ) S
(//port F bit 7 pullups must be off) c n
(//) S 8 T (ADMUX = 0x47; //writes to ADMUX for single-ended, input PORTF bit 7, rig) N
(ht adjusted, 10 bits) N
() p 8 T (ADMUX |= \(1<<REFS0\)|\(1<<MUX2\)|\(1<<MUX1\)|\(1<<MUX0\);) S
(//single-ended, input ) c n
(PORTF bit 7, right adjusted, 10 bits) N
() p 8 T (ADCSRA |= \(1<<ADEN\)|\(1<<ADPS2\)|\(1<<ADPS1\)|\(1<<ADPS0\);) S
(//ADC enabled, don') c n
(t start yet, single shot mode) N
(}) p n
() N
() N
(void) k
( ADC_conversion\(uint16_t ADC_val\)) p n
({) N
() N
() S 8 T () S
(if) K
(\(ADC_val > 0 && ADC_val <= 100\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (OCR2 = 32;) N
() S 8 T (}) N
() N
() S 8 T () S
(if) K
(\(ADC_val > 100 && ADC_val <= 200\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (OCR2 = 64;) N
() S 8 T (}) N
() N
() S 8 T () S
(if) K
(\(ADC_val > 200 && ADC_val <= 300\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (OCR2 = 128;) N
() S 8 T (}) N
() N
() S 8 T () S
(if) K
(\(ADC_val > 300  && ADC_val <= 400\)) p n
(lab5.c) (Page 8/13) (Dec 06, 19 14:42) title
border
grestore
(Printed by ECE473) rhead
(lab5.c) (4/7) (Friday December 06, 2019) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (9-10) 5
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T ({) N
() S 8 T () S 16 T (OCR2 = 160;) N
() S 8 T (}) N
() S 8 T () N
() S 8 T () S
(if) K
(\(ADC_val > 400 && ADC_val <= 500\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (OCR2 = 192;) N
() S 8 T (}) N
() N
() S 8 T () S
(if) K
(\(ADC_val > 500 && ADC_val <= 800\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (OCR2 = 224;) N
() S 8 T (}) N
() N
(}) N
() N
(void) k
( get_remote\(\)) p n
({) N
() S 8 T () S
(if) K
(\(rcv_flag == 1\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (uart_putc\(') S
(S) str
('\);) p n
() S 8 T () S 16 T (rcv_flag = 0;) N
() S 8 T (}) N
() N
(}) N
() N
(ISR\(USART0_RX_vect\)) N
({) N
() S 8 T (rx_char = UDR0; ) S
(//read char) c n
() p 8 T (buff_r[j++] = rx_char;) N
(        ) S
(if) K
(\(\(rx_char==') p
(\\0) str
('\)\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (rcv_rdy = 1;) N
() S 8 T () S 16 T (j = 0;) N
() S 8 T (}) N
() S 8 T () S
(if) K
(\(rcv_rdy == 1\)) p n
() S 8 T ({) N
() S 8 T () S
(//) c 16 T (string2lcd\(buff_r\);) N
() p 8 T () S 16 T (lcd_string_array[9] = buff_r[0];) N
() S 8 T (        lcd_string_array[10] = buff_r[1];) S 56 T () N
() S 8 T () S 16 T (rcv_rdy = 0;) N
() S 8 T (}) S 16 T () N
(}) N
() N
() N
(//**********************************************************************) c n
(//                                main                                 ) N
(//**********************************************************************) N
(int) k
( main\(\){) p n
() N
() S 8 T (timer1_init\(\); ) S
(//initialize timer 1) c n
() p n
() S 8 T (timer3_init\(\);) S 24 T () S
(//initialize timer 3) c n
() p 8 T () N
() S 8 T (timer2_init\(\); ) S
(//initalize timer 2) c n
() p n
() S 8 T (timer0_init\(\); ) S
(//initalize timer 0) c n
() p n
() S 8 T (sei\(\); ) S
(//intialize interrupt) c n
() p n
() S 8 T (DDRE = 0XFF; ) S
(//output mode PORTE) c n
() p 8 T (DDRD = 0xFF;) N
(  ) S 8 T () N
() S 8 T (PORTD = 0x80;) N
() N
() N
() S 8 T (asm ) S
(volatile) K
( \(") p
(nop) str
("\);) p n
() S 8 T (asm ) S
(volatile) K
( \(") p
(nop) str
("\);) p n
() N
(lab5.c) (Page 9/13) (Dec 06, 19 14:42) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (uint8_t display_count = 1; ) S 40 T () S 48 T () S
(//holds count for display ) c n
() p n
() S 8 T (uint8_t i = 0; ) S 24 T () S 32 T () S 40 T () S 48 T () S
(//dummy counter) c n
() p n
() S 8 T () S
(int) k
(16_t count = 0x0000;) p n
() N
() S 8 T () S
(int) k
(16_t alarm_count = 0x0000;) p n
() N
() S 8 T (uint16_t lm73_temp; ) S
(//get temprature from lm73) c n
() p n
() S 8 T (uint8_t timer = 0;) N
() N
() S 8 T () S
(char) k
( buff[20];) p n
() N
() S 8 T (ADC_init\(\);) S 24 T () S 32 T () S 40 T () S 48 T () S
(//initalize ADC ) c n
(//) S 8 T (ADCSRA |= \(1<<ADSC\); //poke ADSC and start conversion) S 64 T () N
() p n
() S 8 T (spi_init\(\);  ) S 24 T () S 32 T () S 40 T () S 48 T () S
(//initalize SPI port) c n
() p n
() S 8 T (lcd_init\(\); ) S 24 T () S 32 T () S 40 T () S 48 T () S
(//initalize lcd ) c n
() p n
() S 8 T (init_twi\(\);) S 24 T () S 32 T () S 40 T () S 48 T () S
(//intialize i2c) c n
() p 8 T () N
() S 8 T (uart_init\(\);) S 24 T () S 32 T () S 40 T () S 48 T () S
(//intialize UART) c n
() p n
() S 8 T () S
(//set LM73 mode for reading temperature by loading pointer register) c n
() p 8 T (lm73_wr_buf[0] = LM73_PTR_TEMP; ) S
(//load lm73_wr_buf[0] with temperature p) c n
(ointer address) N
() p 8 T (twi_start_wr\(LM73_ADDRESS, lm73_wr_buf, 2\); ) S
(//start the TWI write proces) c n
(s) N
() p 8 T (_delay_ms\(2\);    ) S
(//wait for the xfer to finish) c n
() p n
() N
() N
() S 8 T () S
(//clear display) c n
() p 8 T (clear_display\(\);) S 32 T () S 40 T () S 48 T () S
(//clear out the display) c n
(//) S 8 T (string2lcd\("Alarm off"\);) N
(  ) p
(//      cursor_home\(\);) c 32 T () N
() p 8 T () S
(//_delay_ms\(2\);) c n
() p 8 T () N
() N
() N
() S 8 T () S
(while) K
(\(1\){  ) p n
() S 8 T () S 16 T (get_remote\(\);) S
(//get temp data) c n
() p n
() N
() S 8 T () S 16 T (ADCSRA |= \(1<<ADSC\); ) S
(//poke ADSC and start conversion) c 72 T () N
() p 8 T () N
() S 8 T () S 16 T () S
(while) K
(\(bit_is_clear\(ADCSRA, ADIF\)\){};) p n
() S 8 T () N
() S 8 T () S 16 T (ADCSRA |= \(1<<ADIF\); ) S
(//poke ADSC and start conversion) c 72 T () N
() p n
() S 8 T () S 16 T (ADC_val = ADC;) N
() N
() S 8 T () S 16 T (ADC_conversion\(ADC_val\);) N
() N
(//) c 8 T () S 16 T (OCR2 = 0xf0&ADC;) N
() p 8 T () S 16 T () S
(//reset iterator) c n
() p 8 T () S 16 T () S
(if) K
(\(i == 5\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (i = 0;) N
() S 8 T () S 16 T (}) N
() N
() S 8 T () S 16 T () S
(//ADC Conversion) c n
(//) S 8 T () S 16 T (ADC_conversion\(\);) N
() p n
() S 8 T () S 16 T () S
(//insert loop delay for debounce) c n
() p n
() S 8 T () S 16 T (_delay_ms\(2\);) N
(lab5.c) (Page 10/13) (Dec 06, 19 14:42) title
border
grestore
(Printed by ECE473) rhead
(lab5.c) (5/7) (Friday December 06, 2019) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (11-12) 6
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T () S
(//make PORTA an input port with pullups) c n
() p 8 T () S 16 T (DDRA = 0x00;) N
() N
() S 8 T () S 16 T () S
(//NOP after changing DDRX register) c n
() p 8 T () S 16 T (asm ) S
(volatile) K
( \(") p
(nop) str
("\);) p n
() S 8 T () S 16 T (asm ) S
(volatile) K
( \(") p
(nop) str
("\);) p n
() N
() S 8 T () S 16 T (PORTA = 0xFF;) N
() N
() N
() S 8 T () S 16 T () S
(//get encoder direction) c n
() p 8 T () S 16 T (direc = encoder_direction\(\); ) S 48 T () S 56 T () N
() N
() S 8 T () S 16 T () S
(//incrementing/decrementing count depending on mode and directio) c n
(n) N
() p 8 T () S 16 T () S
(//count = count + direction*2^mode) c n
() p 8 T () S 16 T () S
(//direction can be -1 or +1) c n
() p 8 T () S 16 T () S
(//mode can be 0,1,2,3 ) c n
() p n
() S 8 T () S 16 T () S
(//) c 24 T (count = count + temp_0*\(direc*\(display_count<<x\)\);) N
() p n
() S 8 T () S 16 T () S
(//change time mode, enables encoder) c n
() p 8 T () S 16 T () S
(//allows user to change count ie time) c n
() p 8 T () S 16 T () S
(if) K
(\(flag_enc == 1\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (count = count + direc*display_count;) N
() S 8 T () S 16 T (}) N
() N
() S 8 T () S 16 T () S
(//alarm mode, emables encoder) c n
() p 8 T () S 16 T () S
(//allows user to set time for alarm) c n
() p 8 T () S 16 T () S
(if) K
(\(flag_alarm == 1\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T () S
(//) c 32 T (alarm_count = count;) N
() p 8 T () S 16 T () S 24 T (alarm_count = alarm_count + direc*display_count;) N
() S 8 T () S 16 T (}) N
() N
() S 8 T () S 16 T () S
(if) K
(\(flag_enc == 0\)) p n
() S 8 T () S 16 T ({) N
() N
() S 8 T () S 16 T () S 24 T () S
(if) K
(\(flag_min == 1\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (count = count + 1;) N
() S 8 T () S 16 T () S 24 T () S 32 T (flag_min = 0;) N
() S 8 T () S 16 T () S 24 T (}) N
() N
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T () S
(//) c 24 T (count = count + display_count;) N
() p n
() S 8 T () S 16 T () S
(//bound the count to 0 - 1023) c n
() p 8 T () S 16 T () S
(if) K
(\(count < 0\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (count = 0x0000;) N
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T () S
(if) K
(\(count > 1440\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (count = 0x0000;) N
() S 8 T () S 16 T (}) N
() N
() S 8 T () S 16 T () S
(//bound the count to 0 - 1023) c n
() p 8 T () S 16 T () S
(if) K
(\(alarm_count < 0\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (alarm_count = 0x0000;) N
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T () S
(if) K
(\(alarm_count > 1440\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (alarm_count = 0x0000;) N
() S 8 T () S 16 T (}) N
() N
() S 8 T () S 16 T () S
(//break up the disp_value to 4, BCD digits in the array: call \(s) c n
(lab5.c) (Page 11/13) (Dec 06, 19 14:42) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(egsum\)) c n
() p 8 T () S 16 T (segsum\(count, alarm_count\);) N
() N
() S 8 T () S 16 T () S
(//make PORTA an output) c n
() p 8 T () S 16 T (DDRA = 0xFF;) N
() N
() S 8 T () S 16 T () S
(//NOP after changing DDRX register) c n
() p 8 T () S 16 T (asm ) S
(volatile) K
( \(") p
(nop) str
("\);) p n
() S 8 T () S 16 T (asm ) S
(volatile) K
( \(") p
(nop) str
("\);) p n
() N
() S 8 T () S 16 T () S
(//update digit to display) c n
() p n
() S 8 T () S 16 T () S
(//send 7 segment code to LED segments) c n
() p 8 T () S 16 T (PORTA = segment_select[i];) N
() N
() S 8 T () S 16 T () S
(//send PORTB the digit to display) c n
() p 8 T () S 16 T (PORTB = digit_select[i];) N
() N
() S 8 T () S 16 T () S
(//bound a counter \(0-4\) to keep track of digit to display ) c n
() p 8 T () S 16 T (i++;) N
() N
() S 8 T () S 16 T () S
(//Alarm functionality:) c n
() p 8 T () S 16 T () S
(//if the alarm is set, check for count equal to alarm count) c n
() p 8 T () S 16 T () S
(if) K
(\(flag_set_alarm == 1\)) p n
() S 8 T () S 16 T ({) S 24 T () N
() S 8 T () S 16 T () S 24 T () S
(//check if clock time and alrm time match) c n
() p 8 T () S 16 T () S 24 T () S
(if) K
(\(count == alarm_count\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(//play alarm tone) c n
() p 8 T () S 16 T () S 24 T () S 32 T (flag_ringer = 1;) N
() N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(//test purposes) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S
(//x ^= 0x08;) c n
() p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(//reset the alarm clock) c n
() p 8 T () S 16 T () S 24 T () S 32 T (flag_set_alarm = 0;) N
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T (}) N
() N
() N
() N
() S 8 T () S 16 T () S
(//Local temprature sensor) c n
() p 8 T () S 16 T (twi_start_rd\(LM73_ADDRESS, lm73_rd_buf, 2\); ) S
(//read temperature d) c n
(ata from LM73 \(2 bytes\) ) N
(//  ) S 8 T () S 16 T (_delay_ms\(2\);    //wait for it to finish) N
(  ) p 8 T () S 16 T (lm73_temp = lm73_rd_buf[0]; ) S
(//save high temperature byte into lm) c n
(73_temp) N
(  ) p 8 T () S 16 T (lm73_temp = \(lm73_temp << 8\); ) S
(//shift it into upper byte ) c n
(  ) p 8 T () S 16 T (lm73_temp |= lm73_rd_buf[1]; ) S
(//"OR" in the low temp byte to lm73) c n
(_temp) N
(// ) S 8 T () S 16 T (lm73_temp = lm73_temp/128; //convert to celcius ) N
(//  ) S 8 T () S 16 T (sprintf\(lcd_string_array, "temp: %d", lm73_temp\);) N
() p 8 T () N
() S 8 T () S 16 T (itoa\(lm73_temp>>7, buff, 10\);) N
() N
() S 8 T () S 16 T () S
(//Send data to LCD) c n
() p 8 T () S 16 T (lcd_string_array[3] = buff[0];) N
() S 8 T () S 16 T (lcd_string_array[4] = buff[1];) N
(      ) S 8 T () S 16 T () S
(if) K
(\(l<16\)) p n
(      ) S 8 T () S 16 T ({) N
(              ) S 16 T () S 24 T () S
(char) k
(2lcd\(lcd_string_array[l]\);) p n
(              ) S 16 T () S 24 T (l++;) N
(      ) S 8 T () S 16 T (}) N
(      ) S 8 T () S 16 T () S
(else) K
( ) p
(if) K
(\(l==16\)) p n
(      ) S 8 T () S 16 T ({) N
(              ) S 16 T () S 24 T (l=0;) N
(             ) S 16 T () S 24 T (set_cursor\(1,0\);) N
(  ) N
(      ) S 8 T () S 16 T (}) N
(lab5.c) (Page 12/13) (Dec 06, 19 14:42) title
border
grestore
(Printed by ECE473) rhead
(lab5.c) (6/7) (Friday December 06, 2019) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (13) 7
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T () N
() N
() S 8 T (} ) S
(//while\(1\)) c n
(} ) p
(//main) c n
(lab5.c) (Page 13/13) (Dec 06, 19 14:42) title
border
grestore
(Printed by ECE473) rhead
(lab5.c) (7/7) (Friday December 06, 2019) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
