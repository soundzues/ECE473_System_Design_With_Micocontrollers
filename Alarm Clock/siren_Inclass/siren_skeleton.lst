
siren_skeleton.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001a6  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  0000023c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000084e  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a4  00000000  00000000  00000b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000133  00000000  00000000  000012c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  000013f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000353  00000000  00000000  00001448  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000056  00000000  00000000  0000179b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000017f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_26>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ea       	ldi	r30, 0xA6	; 166
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 30       	cpi	r26, 0x04	; 4
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 af 00 	call	0x15e	; 0x15e <main>
  c6:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__vector_26>:
// wget http://www.ece.orst.edu/~traylor/ece473/inclass_exercises/timers_and_counters/siren_skeleton.c

#include <avr/io.h>
#include <avr/interrupt.h>

ISR(TIMER3_COMPA_vect) {
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	2f 93       	push	r18
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
//OCR1A values that work well are from 10000 to 65000
//the values should increment and decrement by about 64
//
  static uint16_t count=0;
  static uint8_t up=1;
    if(up==1){ 
  de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  e2:	81 30       	cpi	r24, 0x01	; 1
  e4:	11 f1       	breq	.+68     	; 0x12a <__vector_26+0x5c>
        if(count < 62000){ count = count + 64;}
        else {count = count - 64; up=0;} 
    }  
    if(up==0){
  e6:	81 11       	cpse	r24, r1
  e8:	1b c0       	rjmp	.+54     	; 0x120 <__vector_26+0x52>
  ea:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  ee:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
        if(count > 10096){ count = count - 64 ;}
  f2:	81 37       	cpi	r24, 0x71	; 113
  f4:	27 e2       	ldi	r18, 0x27	; 39
  f6:	92 07       	cpc	r25, r18
  f8:	58 f5       	brcc	.+86     	; 0x150 <__vector_26+0x82>
        else{count = count + 64; up= 1;}
  fa:	80 5c       	subi	r24, 0xC0	; 192
  fc:	9f 4f       	sbci	r25, 0xFF	; 255
  fe:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 102:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 106:	21 e0       	ldi	r18, 0x01	; 1
 108:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
    }
  OCR1A = count;
 10c:	9b bd       	out	0x2b, r25	; 43
 10e:	8a bd       	out	0x2a, r24	; 42
}
 110:	9f 91       	pop	r25
 112:	8f 91       	pop	r24
 114:	2f 91       	pop	r18
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti
 120:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 124:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 128:	f1 cf       	rjmp	.-30     	; 0x10c <__vector_26+0x3e>
//the values should increment and decrement by about 64
//
  static uint16_t count=0;
  static uint8_t up=1;
    if(up==1){ 
        if(count < 62000){ count = count + 64;}
 12a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 12e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 132:	80 33       	cpi	r24, 0x30	; 48
 134:	22 ef       	ldi	r18, 0xF2	; 242
 136:	92 07       	cpc	r25, r18
 138:	38 f4       	brcc	.+14     	; 0x148 <__vector_26+0x7a>
 13a:	80 5c       	subi	r24, 0xC0	; 192
 13c:	9f 4f       	sbci	r25, 0xFF	; 255
 13e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 142:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 146:	e2 cf       	rjmp	.-60     	; 0x10c <__vector_26+0x3e>
        else {count = count - 64; up=0;} 
 148:	80 54       	subi	r24, 0x40	; 64
 14a:	91 09       	sbc	r25, r1
 14c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
    }  
    if(up==0){
        if(count > 10096){ count = count - 64 ;}
 150:	80 54       	subi	r24, 0x40	; 64
 152:	91 09       	sbc	r25, r1
 154:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 158:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 15c:	d7 cf       	rjmp	.-82     	; 0x10c <__vector_26+0x3e>

0000015e <main>:
}
                                   

int main(){

  DDRB   |= (1<<PB5) | (1<<PB7);                         //set port B bit five and seven as outputs
 15e:	87 b3       	in	r24, 0x17	; 23
 160:	80 6a       	ori	r24, 0xA0	; 160
 162:	87 bb       	out	0x17, r24	; 23

//setup TCNT1

  TCCR1A |= (1<<COM1A1);                       //CTC mode with output pin on 
 164:	8f b5       	in	r24, 0x2f	; 47
 166:	80 68       	ori	r24, 0x80	; 128
 168:	8f bd       	out	0x2f, r24	; 47

  TCCR1B |= (1<<WGM12) | (1 << CS10);                         //use OCR1A as source for TOP, use clk/1
 16a:	8e b5       	in	r24, 0x2e	; 46
 16c:	89 60       	ori	r24, 0x09	; 9
 16e:	8e bd       	out	0x2e, r24	; 46

  TCCR1C =  0x00;                         //no forced compare 
 170:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

//setup TCNT3
// siren update frequency = (16,000,000)/(OCR3A) ~ set to about 1000 cycles/sec

  TCCR3A =  (1<<COM3A1);                     //CTC mode, output pin does not toggle 
 174:	80 e8       	ldi	r24, 0x80	; 128
 176:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>

  TCCR3B =  (1<<WGM32) | (1<<CS30);                          //no prescaling      
 17a:	89 e0       	ldi	r24, 0x09	; 9
 17c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>

  TCCR3C =  0x00;                         //no forced compare 
 180:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__TEXT_REGION_LENGTH__+0x7e008c>

  OCR3A = 0x1000;                            //pick a speed from 0x1000 to 0xF000
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e1       	ldi	r25, 0x10	; 16
 188:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 18c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>

  ETIMSK = (1<<OCIE3A);                    //enable timer 3 interrupt on OCIE3A
 190:	80 e1       	ldi	r24, 0x10	; 16
 192:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x7e007d>
 
 //TCNT2 setup for providing the volume control
 //fast PWM mode, TOP=0xFF, clear on match, clk/128
 //output is on PORTB bit 7 
 TCCR2 =  (1<<WGM21) | (1<<WGM20) | (1<<COM21) | (1<<COM20) | (1<<CS20) | (1<<CS21);
 196:	8b e7       	ldi	r24, 0x7B	; 123
 198:	85 bd       	out	0x25, r24	; 37
 OCR2  = 0x90;  //set to adjust volume control 
 19a:	80 e9       	ldi	r24, 0x90	; 144
 19c:	83 bd       	out	0x23, r24	; 35

  sei();     //set GIE to enable interrupts
 19e:	78 94       	sei
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <main+0x42>

000001a2 <_exit>:
 1a2:	f8 94       	cli

000001a4 <__stop_program>:
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <__stop_program>
