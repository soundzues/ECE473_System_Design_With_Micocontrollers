
bar_graph_noints_skel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000138  000001ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000138  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008da  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000080f  00000000  00000000  00000b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000151  00000000  00000000  00001329  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000147c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a0  00000000  00000000  000014b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c8  00000000  00000000  00001850  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001918  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  7c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  80:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  84:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  88:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  9c:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <spi_init>:
//***********************************************************************
//                            spi_init                               
//**********************************************************************
void spi_init(void){

  DDRB  |= 0x07; //output mode for SS, MOSI, SCLK
  a4:	87 b3       	in	r24, 0x17	; 23
  a6:	87 60       	ori	r24, 0x07	; 7
  a8:	87 bb       	out	0x17, r24	; 23

  SPCR  |= 0x72; //master mode, clk low on idle, leading edge sample, fosc/64
  aa:	8d b1       	in	r24, 0x0d	; 13
  ac:	82 67       	ori	r24, 0x72	; 114
  ae:	8d b9       	out	0x0d, r24	; 13

  SPSR  |= 0x01; //choose double speed operation
  b0:	70 9a       	sbi	0x0e, 0	; 14
  b2:	08 95       	ret

000000b4 <main>:
//***********************************************************************
//                            spi_init                               
//**********************************************************************
void spi_init(void){

  DDRB  |= 0x07; //output mode for SS, MOSI, SCLK
  b4:	87 b3       	in	r24, 0x17	; 23
  b6:	87 60       	ori	r24, 0x07	; 7
  b8:	87 bb       	out	0x17, r24	; 23

  SPCR  |= 0x72; //master mode, clk low on idle, leading edge sample, fosc/64
  ba:	8d b1       	in	r24, 0x0d	; 13
  bc:	82 67       	ori	r24, 0x72	; 114
  be:	8d b9       	out	0x0d, r24	; 13

  SPSR  |= 0x01; //choose double speed operation
  c0:	70 9a       	sbi	0x0e, 0	; 14
//**********************************************************************
//                                main                                 
//**********************************************************************
int main(){     

uint8_t display_count = 1; 		//holds count for display 
  c2:	81 e0       	ldi	r24, 0x01	; 1
uint8_t i; 				//dummy counter

spi_init();  				//initalize SPI port
while(1){                             	//main while loop

    SPDR = display_count;		//send display_count to the display 
  c4:	8f b9       	out	0x0f, r24	; 15

    while (bit_is_clear(SPSR, 7)) {} 	//spin till SPI data has been sent 
  c6:	77 9b       	sbis	0x0e, 7	; 14
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <main+0x12>

    PORTB |= 0x01;	            	//send rising edge to regclk on HC595 
  ca:	c0 9a       	sbi	0x18, 0	; 24

    PORTB &= 0xFE;	           	//send falling edge to regclk on HC595
  cc:	c0 98       	cbi	0x18, 0	; 24

    display_count = display_count << 1;			//shift display_count for next time 
  ce:	88 0f       	add	r24, r24

    if(display_count > 127) {display_count = 1;} //put indicator back to 1st positon
  d0:	87 fd       	sbrc	r24, 7
  d2:	2e c0       	rjmp	.+92     	; 0x130 <main+0x7c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	31 ee       	ldi	r19, 0xE1	; 225
  d8:	94 e0       	ldi	r25, 0x04	; 4
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	30 40       	sbci	r19, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x26>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x30>
  e4:	00 00       	nop
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	31 ee       	ldi	r19, 0xE1	; 225
  ea:	94 e0       	ldi	r25, 0x04	; 4
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	30 40       	sbci	r19, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x38>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x42>
  f6:	00 00       	nop
  f8:	2f ef       	ldi	r18, 0xFF	; 255
  fa:	31 ee       	ldi	r19, 0xE1	; 225
  fc:	94 e0       	ldi	r25, 0x04	; 4
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	30 40       	sbci	r19, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <main+0x4a>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x54>
 108:	00 00       	nop
 10a:	2f ef       	ldi	r18, 0xFF	; 255
 10c:	31 ee       	ldi	r19, 0xE1	; 225
 10e:	94 e0       	ldi	r25, 0x04	; 4
 110:	21 50       	subi	r18, 0x01	; 1
 112:	30 40       	sbci	r19, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x5c>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x66>
 11a:	00 00       	nop
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	31 ee       	ldi	r19, 0xE1	; 225
 120:	94 e0       	ldi	r25, 0x04	; 4
 122:	21 50       	subi	r18, 0x01	; 1
 124:	30 40       	sbci	r19, 0x00	; 0
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <main+0x6e>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0x78>
 12c:	00 00       	nop
 12e:	ca cf       	rjmp	.-108    	; 0xc4 <main+0x10>
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	d0 cf       	rjmp	.-96     	; 0xd4 <main+0x20>

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
