
uart_m128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000ece  00000f62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ece  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f2  00800100  00800100  00000f62  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f62  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002204  00000000  00000000  00001070  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e52  00000000  00000000  00003274  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e3d  00000000  00000000  000040c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b0  00000000  00000000  00004f04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e1  00000000  00000000  000052b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018ff  00000000  00000000  00005995  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00007294  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__ctors_end>
   4:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
   8:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
   c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  10:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  14:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  18:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  1c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  20:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  24:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  28:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  2c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  30:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  34:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  38:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  3c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  40:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  44:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  48:	0c 94 b3 00 	jmp	0x166	; 0x166 <__vector_18>
  4c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  50:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  54:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  58:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  5c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  60:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  64:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  68:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  6c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  70:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  74:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  78:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  7c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  80:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  84:	0c 94 01 06 	jmp	0xc02	; 0xc02 <__vector_33>
  88:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  8c:	42 06       	cpc	r4, r18
  8e:	19 06       	cpc	r1, r25
  90:	19 06       	cpc	r1, r25
  92:	19 06       	cpc	r1, r25
  94:	19 06       	cpc	r1, r25
  96:	19 06       	cpc	r1, r25
  98:	19 06       	cpc	r1, r25
  9a:	19 06       	cpc	r1, r25
  9c:	42 06       	cpc	r4, r18
  9e:	19 06       	cpc	r1, r25
  a0:	19 06       	cpc	r1, r25
  a2:	19 06       	cpc	r1, r25
  a4:	19 06       	cpc	r1, r25
  a6:	19 06       	cpc	r1, r25
  a8:	19 06       	cpc	r1, r25
  aa:	19 06       	cpc	r1, r25
  ac:	4c 06       	cpc	r4, r28
  ae:	19 06       	cpc	r1, r25
  b0:	19 06       	cpc	r1, r25
  b2:	19 06       	cpc	r1, r25
  b4:	19 06       	cpc	r1, r25
  b6:	19 06       	cpc	r1, r25
  b8:	19 06       	cpc	r1, r25
  ba:	19 06       	cpc	r1, r25
  bc:	19 06       	cpc	r1, r25
  be:	19 06       	cpc	r1, r25
  c0:	19 06       	cpc	r1, r25
  c2:	19 06       	cpc	r1, r25
  c4:	19 06       	cpc	r1, r25
  c6:	19 06       	cpc	r1, r25
  c8:	19 06       	cpc	r1, r25
  ca:	19 06       	cpc	r1, r25
  cc:	4c 06       	cpc	r4, r28
  ce:	19 06       	cpc	r1, r25
  d0:	19 06       	cpc	r1, r25
  d2:	19 06       	cpc	r1, r25
  d4:	19 06       	cpc	r1, r25
  d6:	19 06       	cpc	r1, r25
  d8:	19 06       	cpc	r1, r25
  da:	19 06       	cpc	r1, r25
  dc:	19 06       	cpc	r1, r25
  de:	19 06       	cpc	r1, r25
  e0:	19 06       	cpc	r1, r25
  e2:	19 06       	cpc	r1, r25
  e4:	19 06       	cpc	r1, r25
  e6:	19 06       	cpc	r1, r25
  e8:	19 06       	cpc	r1, r25
  ea:	19 06       	cpc	r1, r25
  ec:	63 06       	cpc	r6, r19
  ee:	19 06       	cpc	r1, r25
  f0:	19 06       	cpc	r1, r25
  f2:	19 06       	cpc	r1, r25
  f4:	19 06       	cpc	r1, r25
  f6:	19 06       	cpc	r1, r25
  f8:	19 06       	cpc	r1, r25
  fa:	19 06       	cpc	r1, r25
  fc:	67 06       	cpc	r6, r23
  fe:	19 06       	cpc	r1, r25
 100:	19 06       	cpc	r1, r25
 102:	19 06       	cpc	r1, r25
 104:	19 06       	cpc	r1, r25
 106:	19 06       	cpc	r1, r25
 108:	19 06       	cpc	r1, r25
 10a:	19 06       	cpc	r1, r25
 10c:	19 06       	cpc	r1, r25
 10e:	19 06       	cpc	r1, r25
 110:	19 06       	cpc	r1, r25
 112:	19 06       	cpc	r1, r25
 114:	19 06       	cpc	r1, r25
 116:	19 06       	cpc	r1, r25
 118:	19 06       	cpc	r1, r25
 11a:	19 06       	cpc	r1, r25
 11c:	75 06       	cpc	r7, r21
 11e:	19 06       	cpc	r1, r25
 120:	19 06       	cpc	r1, r25
 122:	19 06       	cpc	r1, r25
 124:	19 06       	cpc	r1, r25
 126:	19 06       	cpc	r1, r25
 128:	19 06       	cpc	r1, r25
 12a:	19 06       	cpc	r1, r25
 12c:	33 06       	cpc	r3, r19

0000012e <__ctors_end>:
 12e:	11 24       	eor	r1, r1
 130:	1f be       	out	0x3f, r1	; 63
 132:	cf ef       	ldi	r28, 0xFF	; 255
 134:	d0 e1       	ldi	r29, 0x10	; 16
 136:	de bf       	out	0x3e, r29	; 62
 138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_clear_bss>:
 13a:	21 e0       	ldi	r18, 0x01	; 1
 13c:	a0 e0       	ldi	r26, 0x00	; 0
 13e:	b1 e0       	ldi	r27, 0x01	; 1
 140:	01 c0       	rjmp	.+2      	; 0x144 <.do_clear_bss_start>

00000142 <.do_clear_bss_loop>:
 142:	1d 92       	st	X+, r1

00000144 <.do_clear_bss_start>:
 144:	a2 3f       	cpi	r26, 0xF2	; 242
 146:	b2 07       	cpc	r27, r18
 148:	e1 f7       	brne	.-8      	; 0x142 <.do_clear_bss_loop>
 14a:	0e 94 bf 06 	call	0xd7e	; 0xd7e <main>
 14e:	0c 94 65 07 	jmp	0xeca	; 0xeca <_exit>

00000152 <__bad_interrupt>:
 152:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000156 <spi_init>:
char              lcd_str_array[16];  //holds string to send to lcd
uint8_t           send_seq=0;         //transmit sequence number
char              lcd_string[3];      //holds value of sequence number

void spi_init(void){
  DDRB   = DDRB | 0x07;           //Turn on SS, MOSI, SCLK pins
 156:	87 b3       	in	r24, 0x17	; 23
 158:	87 60       	ori	r24, 0x07	; 7
 15a:	87 bb       	out	0x17, r24	; 23
  SPCR  |= (1<<SPE) | (1<<MSTR);  //set up SPI mode
 15c:	8d b1       	in	r24, 0x0d	; 13
 15e:	80 65       	ori	r24, 0x50	; 80
 160:	8d b9       	out	0x0d, r24	; 13
  SPSR  |= (1<<SPI2X);            //run at double speed 
 162:	70 9a       	sbi	0x0e, 0	; 14
 164:	08 95       	ret

00000166 <__vector_18>:
 	}//while
}//main


ISR(USART0_RX_vect)
{
 166:	1f 92       	push	r1
 168:	0f 92       	push	r0
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	0f 92       	push	r0
 16e:	11 24       	eor	r1, r1
 170:	0b b6       	in	r0, 0x3b	; 59
 172:	0f 92       	push	r0
 174:	8f 93       	push	r24
 176:	9f 93       	push	r25
 178:	ef 93       	push	r30
 17a:	ff 93       	push	r31
 //   string2lcd("Test");
 // static  uint8_t  i;
  rx_char = UDR0;              //get character
 17c:	8c b1       	in	r24, 0x0c	; 12
 17e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <rx_char>
  lcd_str_array[i++]=rx_char;  //store in array 
 182:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <i>
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	9e 0f       	add	r25, r30
 18a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <i>
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	e8 5f       	subi	r30, 0xF8	; 248
 192:	fe 4f       	sbci	r31, 0xFE	; 254
 194:	80 83       	st	Z, r24
 //if entire string has arrived, set flag, reset index
// uint8_t testvar=1;
  if(rx_char == '\0')
 196:	81 11       	cpse	r24, r1
 198:	05 c0       	rjmp	.+10     	; 0x1a4 <__vector_18+0x3e>
  { 
 //  string2lcd("Test");
    rcv_rdy=1; 
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <rcv_rdy>
    i=0;  
 1a0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <i>
  }

   //char2lcd(rx_char);
   //_delay_ms(10);
}
 1a4:	ff 91       	pop	r31
 1a6:	ef 91       	pop	r30
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	0f 90       	pop	r0
 1ae:	0b be       	out	0x3b, r0	; 59
 1b0:	0f 90       	pop	r0
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	0f 90       	pop	r0
 1b6:	1f 90       	pop	r1
 1b8:	18 95       	reti

000001ba <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 1ba:	5d 9b       	sbis	0x0b, 5	; 11
 1bc:	fe cf       	rjmp	.-4      	; 0x1ba <uart_putc>
    UDR0 = data;    // Send data byte
 1be:	8c b9       	out	0x0c, r24	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 1c0:	5d 9b       	sbis	0x0b, 5	; 11
 1c2:	fe cf       	rjmp	.-4      	; 0x1c0 <uart_putc+0x6>
}
 1c4:	08 95       	ret

000001c6 <uart1_putc>:
//                        uart1_putc
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data) {
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
 1c6:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 1ca:	95 ff       	sbrs	r25, 5
 1cc:	fc cf       	rjmp	.-8      	; 0x1c6 <uart1_putc>
    UDR1 = data;    // Send data byte
 1ce:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
 1d2:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 1d6:	85 ff       	sbrs	r24, 5
 1d8:	fc cf       	rjmp	.-8      	; 0x1d2 <uart1_putc+0xc>
}
 1da:	08 95       	ret

000001dc <uart_puts>:

//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
 1dc:	fc 01       	movw	r30, r24
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
 1de:	90 81       	ld	r25, Z
 1e0:	99 23       	and	r25, r25
 1e2:	49 f0       	breq	.+18     	; 0x1f6 <uart_puts+0x1a>
 1e4:	31 96       	adiw	r30, 0x01	; 1
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 1e6:	5d 9b       	sbis	0x0b, 5	; 11
 1e8:	fe cf       	rjmp	.-4      	; 0x1e6 <uart_puts+0xa>
    UDR0 = data;    // Send data byte
 1ea:	9c b9       	out	0x0c, r25	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 1ec:	5d 9b       	sbis	0x0b, 5	; 11
 1ee:	fe cf       	rjmp	.-4      	; 0x1ec <uart_puts+0x10>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
 1f0:	91 91       	ld	r25, Z+
 1f2:	91 11       	cpse	r25, r1
 1f4:	f8 cf       	rjmp	.-16     	; 0x1e6 <uart_puts+0xa>
 1f6:	08 95       	ret

000001f8 <uart1_puts>:
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
 1f8:	fc 01       	movw	r30, r24
 1fa:	20 81       	ld	r18, Z
 1fc:	22 23       	and	r18, r18
 1fe:	71 f0       	breq	.+28     	; 0x21c <uart1_puts+0x24>
 200:	31 96       	adiw	r30, 0x01	; 1
//                        uart1_putc
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data) {
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
 202:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 206:	95 ff       	sbrs	r25, 5
 208:	fc cf       	rjmp	.-8      	; 0x202 <uart1_puts+0xa>
    UDR1 = data;    // Send data byte
 20a:	20 93 9c 00 	sts	0x009C, r18	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
 20e:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 212:	95 ff       	sbrs	r25, 5
 214:	fc cf       	rjmp	.-8      	; 0x20e <uart1_puts+0x16>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
 216:	21 91       	ld	r18, Z+
 218:	21 11       	cpse	r18, r1
 21a:	f3 cf       	rjmp	.-26     	; 0x202 <uart1_puts+0xa>
 21c:	08 95       	ret

0000021e <uart_puts_p>:
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
 21e:	9c 01       	movw	r18, r24
 220:	fc 01       	movw	r30, r24
 222:	44 91       	lpm	r20, Z
 224:	44 23       	and	r20, r20
 226:	69 f0       	breq	.+26     	; 0x242 <uart_puts_p+0x24>
        uart_putc(pgm_read_byte(str++));
 228:	01 96       	adiw	r24, 0x01	; 1
 22a:	f9 01       	movw	r30, r18
 22c:	24 91       	lpm	r18, Z
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 22e:	5d 9b       	sbis	0x0b, 5	; 11
 230:	fe cf       	rjmp	.-4      	; 0x22e <uart_puts_p+0x10>
    UDR0 = data;    // Send data byte
 232:	2c b9       	out	0x0c, r18	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 234:	5d 9b       	sbis	0x0b, 5	; 11
 236:	fe cf       	rjmp	.-4      	; 0x234 <uart_puts_p+0x16>
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
 238:	9c 01       	movw	r18, r24
 23a:	fc 01       	movw	r30, r24
 23c:	44 91       	lpm	r20, Z
 23e:	41 11       	cpse	r20, r1
 240:	f3 cf       	rjmp	.-26     	; 0x228 <uart_puts_p+0xa>
        uart_putc(pgm_read_byte(str++));
    }
}
 242:	08 95       	ret

00000244 <uart_init>:
//Jumpers J14 and J16 (mega128.1) or Jumpers J7 and J9 (mega128.2)
//must be in place for the MAX232 chip to get data.

void uart_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0); //INTERRUPTS ENABLED
 244:	8a b1       	in	r24, 0x0a	; 10
 246:	88 69       	ori	r24, 0x98	; 152
 248:	8a b9       	out	0x0a, r24	; 10
//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);               //INTERRUPS DISABLED

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 24a:	e5 e9       	ldi	r30, 0x95	; 149
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	86 60       	ori	r24, 0x06	; 6
 252:	80 83       	st	Z, r24
  UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
 254:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
  UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
 258:	87 e6       	ldi	r24, 0x67	; 103
 25a:	89 b9       	out	0x09, r24	; 9
 25c:	08 95       	ret

0000025e <uart1_init>:
//must be in place for the MAX232 chip to get data.

void uart1_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
//UCSR1B |= (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1); //INTERRUPTS ENABLED
  UCSR1B |= (1<<RXEN1) | (1<<TXEN1);               //INTERRUPS DISABLED
 25e:	ea e9       	ldi	r30, 0x9A	; 154
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	88 61       	ori	r24, 0x18	; 24
 266:	80 83       	st	Z, r24

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);
 268:	ed e9       	ldi	r30, 0x9D	; 157
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	86 60       	ori	r24, 0x06	; 6
 270:	80 83       	st	Z, r24
  UBRR1H = (BAUDVALUE_1 >>8 ); //load upper byte of the baud rate into UBRR 
 272:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
  UBRR1L =  BAUDVALUE_1;       //load lower byte of the baud rate into UBRR 
 276:	87 e6       	ldi	r24, 0x67	; 103
 278:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 27c:	08 95       	ret

0000027e <uart_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
 27e:	80 e8       	ldi	r24, 0x80	; 128
 280:	9e e3       	ldi	r25, 0x3E	; 62
 282:	02 c0       	rjmp	.+4      	; 0x288 <uart_getc+0xa>
 284:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
 286:	21 f0       	breq	.+8      	; 0x290 <uart_getc+0x12>
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
 288:	5f 9b       	sbis	0x0b, 7	; 11
 28a:	fc cf       	rjmp	.-8      	; 0x284 <uart_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
 28c:	8c b1       	in	r24, 0x0c	; 12
 28e:	08 95       	ret
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
  timer++;
  if(timer >= 16000){ return(0);}
 290:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
}
 292:	08 95       	ret

00000294 <uart1_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
 294:	80 e8       	ldi	r24, 0x80	; 128
 296:	9e e3       	ldi	r25, 0x3E	; 62
 298:	02 c0       	rjmp	.+4      	; 0x29e <uart1_getc+0xa>
 29a:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
 29c:	39 f0       	breq	.+14     	; 0x2ac <uart1_getc+0x18>
//Modified to not block indefinately in the case of a lost byte
//
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
 29e:	20 91 9b 00 	lds	r18, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 2a2:	27 ff       	sbrs	r18, 7
 2a4:	fa cf       	rjmp	.-12     	; 0x29a <uart1_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR1); //return the received data
 2a6:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 2aa:	08 95       	ret
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
  timer++;
  if(timer >= 16000){ return(0);}
 2ac:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR1); //return the received data
}
 2ae:	08 95       	ret

000002b0 <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	81 11       	cpse	r24, r1
 2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <send_lcd+0x8>
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 2ba:	77 9b       	sbis	0x0e, 7	; 14
 2bc:	fe cf       	rjmp	.-4      	; 0x2ba <send_lcd+0xa>
  SPDR = byte;                        //send payload
 2be:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 2c0:	77 9b       	sbis	0x0e, 7	; 14
 2c2:	fe cf       	rjmp	.-4      	; 0x2c0 <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 2c4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 2c8:	88 60       	ori	r24, 0x08	; 8
 2ca:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 2ce:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 2d2:	87 7f       	andi	r24, 0xF7	; 247
 2d4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 2d8:	08 95       	ret

000002da <refresh_lcd>:
//
void refresh_lcd(char lcd_string_array[]) {

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 2da:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <i.2094>
 2de:	82 0f       	add	r24, r18
 2e0:	91 1d       	adc	r25, r1
 2e2:	fc 01       	movw	r30, r24
 2e4:	80 81       	ld	r24, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 2e6:	91 e0       	ldi	r25, 0x01	; 1
 2e8:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 2ea:	77 9b       	sbis	0x0e, 7	; 14
 2ec:	fe cf       	rjmp	.-4      	; 0x2ea <refresh_lcd+0x10>
  SPDR = byte;                        //send payload
 2ee:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 2f0:	77 9b       	sbis	0x0e, 7	; 14
 2f2:	fe cf       	rjmp	.-4      	; 0x2f0 <refresh_lcd+0x16>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 2f4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 2f8:	88 60       	ori	r24, 0x08	; 8
 2fa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 2fe:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 302:	87 7f       	andi	r24, 0xF7	; 247
 304:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
void refresh_lcd(char lcd_string_array[]) {

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
 308:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <i.2094>
 30c:	8f 5f       	subi	r24, 0xFF	; 255
 30e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <i.2094>
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 312:	80 31       	cpi	r24, 0x10	; 16
 314:	d9 f0       	breq	.+54     	; 0x34c <refresh_lcd+0x72>
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
 316:	80 32       	cpi	r24, 0x20	; 32
 318:	09 f0       	breq	.+2      	; 0x31c <refresh_lcd+0x42>
 31a:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 31c:	85 ed       	ldi	r24, 0xD5	; 213
 31e:	8a 95       	dec	r24
 320:	f1 f7       	brne	.-4      	; 0x31e <refresh_lcd+0x44>
 322:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 324:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 326:	77 9b       	sbis	0x0e, 7	; 14
 328:	fe cf       	rjmp	.-4      	; 0x326 <refresh_lcd+0x4c>
  SPDR = byte;                        //send payload
 32a:	80 e8       	ldi	r24, 0x80	; 128
 32c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 32e:	77 9b       	sbis	0x0e, 7	; 14
 330:	fe cf       	rjmp	.-4      	; 0x32e <refresh_lcd+0x54>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 332:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 336:	88 60       	ori	r24, 0x08	; 8
 338:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 33c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 340:	87 7f       	andi	r24, 0xF7	; 247
 342:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
 346:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <i.2094>
 34a:	08 95       	ret
 34c:	f5 ed       	ldi	r31, 0xD5	; 213
 34e:	fa 95       	dec	r31
 350:	f1 f7       	brne	.-4      	; 0x34e <refresh_lcd+0x74>
 352:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 354:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 356:	77 9b       	sbis	0x0e, 7	; 14
 358:	fe cf       	rjmp	.-4      	; 0x356 <refresh_lcd+0x7c>
  SPDR = byte;                        //send payload
 35a:	80 ec       	ldi	r24, 0xC0	; 192
 35c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 35e:	77 9b       	sbis	0x0e, 7	; 14
 360:	fe cf       	rjmp	.-4      	; 0x35e <refresh_lcd+0x84>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 362:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 366:	88 60       	ori	r24, 0x08	; 8
 368:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 36c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 370:	87 7f       	andi	r24, 0xF7	; 247
 372:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 376:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <i.2094>
 37a:	cd cf       	rjmp	.-102    	; 0x316 <refresh_lcd+0x3c>

0000037c <set_custom_character>:
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
 37c:	66 0f       	add	r22, r22
 37e:	66 0f       	add	r22, r22
 380:	66 0f       	add	r22, r22
 382:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 384:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 386:	77 9b       	sbis	0x0e, 7	; 14
 388:	fe cf       	rjmp	.-4      	; 0x386 <set_custom_character+0xa>
  SPDR = byte;                        //send payload
 38a:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 38c:	77 9b       	sbis	0x0e, 7	; 14
 38e:	fe cf       	rjmp	.-4      	; 0x38c <set_custom_character+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 390:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 394:	28 60       	ori	r18, 0x08	; 8
 396:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 39a:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 39e:	27 7f       	andi	r18, 0xF7	; 247
 3a0:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3a4:	25 ed       	ldi	r18, 0xD5	; 213
 3a6:	2a 95       	dec	r18
 3a8:	f1 f7       	brne	.-4      	; 0x3a6 <set_custom_character+0x2a>
 3aa:	00 00       	nop
 3ac:	fc 01       	movw	r30, r24
 3ae:	9c 01       	movw	r18, r24
 3b0:	28 5f       	subi	r18, 0xF8	; 248
 3b2:	3f 4f       	sbci	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 3b4:	91 e0       	ldi	r25, 0x01	; 1

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
 3b6:	81 91       	ld	r24, Z+
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 3b8:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3ba:	77 9b       	sbis	0x0e, 7	; 14
 3bc:	fe cf       	rjmp	.-4      	; 0x3ba <set_custom_character+0x3e>
  SPDR = byte;                        //send payload
 3be:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3c0:	77 9b       	sbis	0x0e, 7	; 14
 3c2:	fe cf       	rjmp	.-4      	; 0x3c0 <set_custom_character+0x44>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 3c4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3c8:	88 60       	ori	r24, 0x08	; 8
 3ca:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3ce:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3d2:	87 7f       	andi	r24, 0xF7	; 247
 3d4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3d8:	85 ed       	ldi	r24, 0xD5	; 213
 3da:	8a 95       	dec	r24
 3dc:	f1 f7       	brne	.-4      	; 0x3da <set_custom_character+0x5e>
 3de:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
 3e0:	e2 17       	cp	r30, r18
 3e2:	f3 07       	cpc	r31, r19
 3e4:	41 f7       	brne	.-48     	; 0x3b6 <set_custom_character+0x3a>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
 3e6:	08 95       	ret

000003e8 <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
 3e8:	90 e4       	ldi	r25, 0x40	; 64
 3ea:	89 9f       	mul	r24, r25
 3ec:	60 0d       	add	r22, r0
 3ee:	11 24       	eor	r1, r1
 3f0:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 3f2:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3f4:	77 9b       	sbis	0x0e, 7	; 14
 3f6:	fe cf       	rjmp	.-4      	; 0x3f4 <set_cursor+0xc>
  SPDR = byte;                        //send payload
 3f8:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3fa:	77 9b       	sbis	0x0e, 7	; 14
 3fc:	fe cf       	rjmp	.-4      	; 0x3fa <set_cursor+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 3fe:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 402:	88 60       	ori	r24, 0x08	; 8
 404:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 408:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 40c:	87 7f       	andi	r24, 0xF7	; 247
 40e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 412:	08 95       	ret

00000414 <uint2lcd>:
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
 414:	81 11       	cpse	r24, r1
 416:	13 c0       	rjmp	.+38     	; 0x43e <uint2lcd+0x2a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 41c:	77 9b       	sbis	0x0e, 7	; 14
 41e:	fe cf       	rjmp	.-4      	; 0x41c <uint2lcd+0x8>
  SPDR = byte;                        //send payload
 420:	80 e3       	ldi	r24, 0x30	; 48
 422:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 424:	77 9b       	sbis	0x0e, 7	; 14
 426:	fe cf       	rjmp	.-4      	; 0x424 <uint2lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 428:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 42c:	88 60       	ori	r24, 0x08	; 8
 42e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 432:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 436:	87 7f       	andi	r24, 0xF7	; 247
 438:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 43c:	08 95       	ret
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
 43e:	84 36       	cpi	r24, 0x64	; 100
 440:	b0 f4       	brcc	.+44     	; 0x46e <uint2lcd+0x5a>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
 442:	8a 30       	cpi	r24, 0x0A	; 10
 444:	60 f5       	brcc	.+88     	; 0x49e <uint2lcd+0x8a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 446:	91 e0       	ldi	r25, 0x01	; 1
 448:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 44a:	77 9b       	sbis	0x0e, 7	; 14
 44c:	fe cf       	rjmp	.-4      	; 0x44a <uint2lcd+0x36>
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
 44e:	9d ec       	ldi	r25, 0xCD	; 205
 450:	89 9f       	mul	r24, r25
 452:	91 2d       	mov	r25, r1
 454:	11 24       	eor	r1, r1
 456:	96 95       	lsr	r25
 458:	96 95       	lsr	r25
 45a:	96 95       	lsr	r25
 45c:	2a e0       	ldi	r18, 0x0A	; 10
 45e:	92 9f       	mul	r25, r18
 460:	80 19       	sub	r24, r0
 462:	11 24       	eor	r1, r1
 464:	80 5d       	subi	r24, 0xD0	; 208
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
 466:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 468:	77 9b       	sbis	0x0e, 7	; 14
 46a:	fe cf       	rjmp	.-4      	; 0x468 <uint2lcd+0x54>
 46c:	dd cf       	rjmp	.-70     	; 0x428 <uint2lcd+0x14>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
 46e:	99 e2       	ldi	r25, 0x29	; 41
 470:	89 9f       	mul	r24, r25
 472:	91 2d       	mov	r25, r1
 474:	11 24       	eor	r1, r1
 476:	92 95       	swap	r25
 478:	9f 70       	andi	r25, 0x0F	; 15
 47a:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 47c:	21 e0       	ldi	r18, 0x01	; 1
 47e:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 480:	77 9b       	sbis	0x0e, 7	; 14
 482:	fe cf       	rjmp	.-4      	; 0x480 <uint2lcd+0x6c>
  SPDR = byte;                        //send payload
 484:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 486:	77 9b       	sbis	0x0e, 7	; 14
 488:	fe cf       	rjmp	.-4      	; 0x486 <uint2lcd+0x72>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 48a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 48e:	98 60       	ori	r25, 0x08	; 8
 490:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 494:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 498:	97 7f       	andi	r25, 0xF7	; 247
 49a:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
 49e:	99 e2       	ldi	r25, 0x29	; 41
 4a0:	89 9f       	mul	r24, r25
 4a2:	91 2d       	mov	r25, r1
 4a4:	11 24       	eor	r1, r1
 4a6:	92 95       	swap	r25
 4a8:	9f 70       	andi	r25, 0x0F	; 15
 4aa:	38 2f       	mov	r19, r24
 4ac:	24 e6       	ldi	r18, 0x64	; 100
 4ae:	92 9f       	mul	r25, r18
 4b0:	30 19       	sub	r19, r0
 4b2:	11 24       	eor	r1, r1
 4b4:	2d ec       	ldi	r18, 0xCD	; 205
 4b6:	32 9f       	mul	r19, r18
 4b8:	91 2d       	mov	r25, r1
 4ba:	11 24       	eor	r1, r1
 4bc:	96 95       	lsr	r25
 4be:	96 95       	lsr	r25
 4c0:	96 95       	lsr	r25
 4c2:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 4c4:	21 e0       	ldi	r18, 0x01	; 1
 4c6:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 4c8:	77 9b       	sbis	0x0e, 7	; 14
 4ca:	fe cf       	rjmp	.-4      	; 0x4c8 <uint2lcd+0xb4>
  SPDR = byte;                        //send payload
 4cc:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 4ce:	77 9b       	sbis	0x0e, 7	; 14
 4d0:	fe cf       	rjmp	.-4      	; 0x4ce <uint2lcd+0xba>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 4d2:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4d6:	98 60       	ori	r25, 0x08	; 8
 4d8:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4dc:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4e0:	97 7f       	andi	r25, 0xF7	; 247
 4e2:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4e6:	af cf       	rjmp	.-162    	; 0x446 <uint2lcd+0x32>

000004e8 <int2lcd>:
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
 4e8:	87 ff       	sbrs	r24, 7
    else          {uint2lcd(number);                                            }
 4ea:	0c 94 0a 02 	jmp	0x414	; 0x414 <uint2lcd>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 4ee:	91 e0       	ldi	r25, 0x01	; 1
 4f0:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 4f2:	77 9b       	sbis	0x0e, 7	; 14
 4f4:	fe cf       	rjmp	.-4      	; 0x4f2 <int2lcd+0xa>
  SPDR = byte;                        //send payload
 4f6:	9d e2       	ldi	r25, 0x2D	; 45
 4f8:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 4fa:	77 9b       	sbis	0x0e, 7	; 14
 4fc:	fe cf       	rjmp	.-4      	; 0x4fa <int2lcd+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 4fe:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 502:	98 60       	ori	r25, 0x08	; 8
 504:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 508:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 50c:	97 7f       	andi	r25, 0xF7	; 247
 50e:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 512:	95 ed       	ldi	r25, 0xD5	; 213
 514:	9a 95       	dec	r25
 516:	f1 f7       	brne	.-4      	; 0x514 <int2lcd+0x2c>
 518:	00 00       	nop
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
 51a:	81 95       	neg	r24
 51c:	0c 94 0a 02 	jmp	0x414	; 0x414 <uint2lcd>

00000520 <cursor_on>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 520:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 522:	77 9b       	sbis	0x0e, 7	; 14
 524:	fe cf       	rjmp	.-4      	; 0x522 <cursor_on+0x2>
  SPDR = byte;                        //send payload
 526:	8e e0       	ldi	r24, 0x0E	; 14
 528:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 52a:	77 9b       	sbis	0x0e, 7	; 14
 52c:	fe cf       	rjmp	.-4      	; 0x52a <cursor_on+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 52e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 532:	88 60       	ori	r24, 0x08	; 8
 534:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 538:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 53c:	87 7f       	andi	r24, 0xF7	; 247
 53e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 542:	08 95       	ret

00000544 <cursor_off>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 544:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 546:	77 9b       	sbis	0x0e, 7	; 14
 548:	fe cf       	rjmp	.-4      	; 0x546 <cursor_off+0x2>
  SPDR = byte;                        //send payload
 54a:	8c e0       	ldi	r24, 0x0C	; 12
 54c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 54e:	77 9b       	sbis	0x0e, 7	; 14
 550:	fe cf       	rjmp	.-4      	; 0x54e <cursor_off+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 552:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 556:	88 60       	ori	r24, 0x08	; 8
 558:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 55c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 560:	87 7f       	andi	r24, 0xF7	; 247
 562:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 566:	08 95       	ret

00000568 <shift_right>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 568:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 56a:	77 9b       	sbis	0x0e, 7	; 14
 56c:	fe cf       	rjmp	.-4      	; 0x56a <shift_right+0x2>
  SPDR = byte;                        //send payload
 56e:	8e e1       	ldi	r24, 0x1E	; 30
 570:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 572:	77 9b       	sbis	0x0e, 7	; 14
 574:	fe cf       	rjmp	.-4      	; 0x572 <shift_right+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 576:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 57a:	88 60       	ori	r24, 0x08	; 8
 57c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 580:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 584:	87 7f       	andi	r24, 0xF7	; 247
 586:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 58a:	08 95       	ret

0000058c <shift_left>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 58c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 58e:	77 9b       	sbis	0x0e, 7	; 14
 590:	fe cf       	rjmp	.-4      	; 0x58e <shift_left+0x2>
  SPDR = byte;                        //send payload
 592:	88 e1       	ldi	r24, 0x18	; 24
 594:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 596:	77 9b       	sbis	0x0e, 7	; 14
 598:	fe cf       	rjmp	.-4      	; 0x596 <shift_left+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 59a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 59e:	88 60       	ori	r24, 0x08	; 8
 5a0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5a4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5a8:	87 7f       	andi	r24, 0xF7	; 247
 5aa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5ae:	08 95       	ret

000005b0 <strobe_lcd>:
 5b0:	e2 e6       	ldi	r30, 0x62	; 98
 5b2:	f0 e0       	ldi	r31, 0x00	; 0
 5b4:	80 81       	ld	r24, Z
 5b6:	88 60       	ori	r24, 0x08	; 8
 5b8:	80 83       	st	Z, r24
 5ba:	80 81       	ld	r24, Z
 5bc:	87 7f       	andi	r24, 0xF7	; 247
 5be:	80 83       	st	Z, r24
 5c0:	08 95       	ret

000005c2 <clear_display>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 5c2:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 5c4:	77 9b       	sbis	0x0e, 7	; 14
 5c6:	fe cf       	rjmp	.-4      	; 0x5c4 <clear_display+0x2>
  SPDR = byte;                        //send payload
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 5cc:	77 9b       	sbis	0x0e, 7	; 14
 5ce:	fe cf       	rjmp	.-4      	; 0x5cc <clear_display+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 5d0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5d4:	88 60       	ori	r24, 0x08	; 8
 5d6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5da:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5de:	87 7f       	andi	r24, 0xF7	; 247
 5e0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5e4:	8f e1       	ldi	r24, 0x1F	; 31
 5e6:	9c e1       	ldi	r25, 0x1C	; 28
 5e8:	01 97       	sbiw	r24, 0x01	; 1
 5ea:	f1 f7       	brne	.-4      	; 0x5e8 <clear_display+0x26>
 5ec:	00 c0       	rjmp	.+0      	; 0x5ee <clear_display+0x2c>
 5ee:	00 00       	nop
 5f0:	08 95       	ret

000005f2 <cursor_home>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 5f2:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 5f4:	77 9b       	sbis	0x0e, 7	; 14
 5f6:	fe cf       	rjmp	.-4      	; 0x5f4 <cursor_home+0x2>
  SPDR = byte;                        //send payload
 5f8:	82 e0       	ldi	r24, 0x02	; 2
 5fa:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 5fc:	77 9b       	sbis	0x0e, 7	; 14
 5fe:	fe cf       	rjmp	.-4      	; 0x5fc <cursor_home+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 600:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 604:	88 60       	ori	r24, 0x08	; 8
 606:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 60a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 60e:	87 7f       	andi	r24, 0xF7	; 247
 610:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 614:	8f e6       	ldi	r24, 0x6F	; 111
 616:	97 e1       	ldi	r25, 0x17	; 23
 618:	01 97       	sbiw	r24, 0x01	; 1
 61a:	f1 f7       	brne	.-4      	; 0x618 <cursor_home+0x26>
 61c:	00 c0       	rjmp	.+0      	; 0x61e <cursor_home+0x2c>
 61e:	00 00       	nop
 620:	08 95       	ret

00000622 <line2_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 622:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 624:	77 9b       	sbis	0x0e, 7	; 14
 626:	fe cf       	rjmp	.-4      	; 0x624 <line2_col1+0x2>
  SPDR = byte;                        //send payload
 628:	80 ec       	ldi	r24, 0xC0	; 192
 62a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 62c:	77 9b       	sbis	0x0e, 7	; 14
 62e:	fe cf       	rjmp	.-4      	; 0x62c <line2_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 630:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 634:	88 60       	ori	r24, 0x08	; 8
 636:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 63a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 63e:	87 7f       	andi	r24, 0xF7	; 247
 640:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 644:	08 95       	ret

00000646 <line1_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 646:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 648:	77 9b       	sbis	0x0e, 7	; 14
 64a:	fe cf       	rjmp	.-4      	; 0x648 <line1_col1+0x2>
  SPDR = byte;                        //send payload
 64c:	80 e8       	ldi	r24, 0x80	; 128
 64e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 650:	77 9b       	sbis	0x0e, 7	; 14
 652:	fe cf       	rjmp	.-4      	; 0x650 <line1_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 654:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 658:	88 60       	ori	r24, 0x08	; 8
 65a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 65e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 662:	87 7f       	andi	r24, 0xF7	; 247
 664:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 668:	08 95       	ret

0000066a <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
 66a:	90 e1       	ldi	r25, 0x10	; 16
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 66c:	31 e0       	ldi	r19, 0x01	; 1
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
 66e:	20 e2       	ldi	r18, 0x20	; 32
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 670:	3f b9       	out	0x0f, r19	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 672:	77 9b       	sbis	0x0e, 7	; 14
 674:	fe cf       	rjmp	.-4      	; 0x672 <fill_spaces+0x8>
  SPDR = byte;                        //send payload
 676:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 678:	77 9b       	sbis	0x0e, 7	; 14
 67a:	fe cf       	rjmp	.-4      	; 0x678 <fill_spaces+0xe>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 67c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 680:	88 60       	ori	r24, 0x08	; 8
 682:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 686:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 68a:	87 7f       	andi	r24, 0xF7	; 247
 68c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 690:	85 ed       	ldi	r24, 0xD5	; 213
 692:	8a 95       	dec	r24
 694:	f1 f7       	brne	.-4      	; 0x692 <fill_spaces+0x28>
 696:	00 00       	nop
 698:	91 50       	subi	r25, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
 69a:	51 f7       	brne	.-44     	; 0x670 <fill_spaces+0x6>
		send_lcd(CHAR_BYTE, ' '); 
                _delay_us(40);  //40us wait between characters
	}
}  
 69c:	08 95       	ret

0000069e <char2lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 69e:	91 e0       	ldi	r25, 0x01	; 1
 6a0:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 6a2:	77 9b       	sbis	0x0e, 7	; 14
 6a4:	fe cf       	rjmp	.-4      	; 0x6a2 <char2lcd+0x4>
  SPDR = byte;                        //send payload
 6a6:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 6a8:	77 9b       	sbis	0x0e, 7	; 14
 6aa:	fe cf       	rjmp	.-4      	; 0x6a8 <char2lcd+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 6ac:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6b0:	88 60       	ori	r24, 0x08	; 8
 6b2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6b6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6ba:	87 7f       	andi	r24, 0xF7	; 247
 6bc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6c0:	08 95       	ret

000006c2 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
 6c2:	fc 01       	movw	r30, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
 6c4:	40 e0       	ldi	r20, 0x00	; 0
 6c6:	50 e0       	ldi	r21, 0x00	; 0
 6c8:	60 e0       	ldi	r22, 0x00	; 0
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 6ca:	71 e0       	ldi	r23, 0x01	; 1
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
 6cc:	df 01       	movw	r26, r30
 6ce:	a4 0f       	add	r26, r20
 6d0:	b5 1f       	adc	r27, r21
 6d2:	8c 91       	ld	r24, X
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 6d4:	7f b9       	out	0x0f, r23	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 6d6:	77 9b       	sbis	0x0e, 7	; 14
 6d8:	fe cf       	rjmp	.-4      	; 0x6d6 <string2lcd+0x14>
  SPDR = byte;                        //send payload
 6da:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 6dc:	77 9b       	sbis	0x0e, 7	; 14
 6de:	fe cf       	rjmp	.-4      	; 0x6dc <string2lcd+0x1a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 6e0:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6e4:	98 60       	ori	r25, 0x08	; 8
 6e6:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6ea:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6ee:	97 7f       	andi	r25, 0xF7	; 247
 6f0:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6f4:	85 ed       	ldi	r24, 0xD5	; 213
 6f6:	8a 95       	dec	r24
 6f8:	f1 f7       	brne	.-4      	; 0x6f6 <string2lcd+0x34>
 6fa:	00 00       	nop
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
 6fc:	6f 5f       	subi	r22, 0xFF	; 255
 6fe:	46 2f       	mov	r20, r22
 700:	50 e0       	ldi	r21, 0x00	; 0
 702:	df 01       	movw	r26, r30
 704:	0d 90       	ld	r0, X+
 706:	00 20       	and	r0, r0
 708:	e9 f7       	brne	.-6      	; 0x704 <string2lcd+0x42>
 70a:	9d 01       	movw	r18, r26
 70c:	2e 1b       	sub	r18, r30
 70e:	3f 0b       	sbc	r19, r31
 710:	22 50       	subi	r18, 0x02	; 2
 712:	31 09       	sbc	r19, r1
 714:	24 17       	cp	r18, r20
 716:	35 07       	cpc	r19, r21
 718:	c8 f6       	brcc	.-78     	; 0x6cc <string2lcd+0xa>
  _delay_us(40);  //execution takes 37us per character
  }                  
} 
 71a:	08 95       	ret

0000071c <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 71c:	8f ef       	ldi	r24, 0xFF	; 255
 71e:	99 ef       	ldi	r25, 0xF9	; 249
 720:	01 97       	sbiw	r24, 0x01	; 1
 722:	f1 f7       	brne	.-4      	; 0x720 <lcd_init+0x4>
 724:	00 c0       	rjmp	.+0      	; 0x726 <lcd_init+0xa>
 726:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
 728:	88 e0       	ldi	r24, 0x08	; 8
 72a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 72e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 730:	77 9b       	sbis	0x0e, 7	; 14
 732:	fe cf       	rjmp	.-4      	; 0x730 <lcd_init+0x14>
  SPDR = byte;                        //send payload
 734:	80 e3       	ldi	r24, 0x30	; 48
 736:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 738:	77 9b       	sbis	0x0e, 7	; 14
 73a:	fe cf       	rjmp	.-4      	; 0x738 <lcd_init+0x1c>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 73c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 740:	88 60       	ori	r24, 0x08	; 8
 742:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 746:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 74a:	87 7f       	andi	r24, 0xF7	; 247
 74c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 750:	8f e5       	ldi	r24, 0x5F	; 95
 752:	9d e6       	ldi	r25, 0x6D	; 109
 754:	01 97       	sbiw	r24, 0x01	; 1
 756:	f1 f7       	brne	.-4      	; 0x754 <lcd_init+0x38>
 758:	00 c0       	rjmp	.+0      	; 0x75a <lcd_init+0x3e>
 75a:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 75c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 75e:	77 9b       	sbis	0x0e, 7	; 14
 760:	fe cf       	rjmp	.-4      	; 0x75e <lcd_init+0x42>
  SPDR = byte;                        //send payload
 762:	80 e3       	ldi	r24, 0x30	; 48
 764:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 766:	77 9b       	sbis	0x0e, 7	; 14
 768:	fe cf       	rjmp	.-4      	; 0x766 <lcd_init+0x4a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 76a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 76e:	88 60       	ori	r24, 0x08	; 8
 770:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 774:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 778:	87 7f       	andi	r24, 0xF7	; 247
 77a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 77e:	8f e5       	ldi	r24, 0x5F	; 95
 780:	9d e6       	ldi	r25, 0x6D	; 109
 782:	01 97       	sbiw	r24, 0x01	; 1
 784:	f1 f7       	brne	.-4      	; 0x782 <lcd_init+0x66>
 786:	00 c0       	rjmp	.+0      	; 0x788 <lcd_init+0x6c>
 788:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 78a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 78c:	77 9b       	sbis	0x0e, 7	; 14
 78e:	fe cf       	rjmp	.-4      	; 0x78c <lcd_init+0x70>
  SPDR = byte;                        //send payload
 790:	80 e3       	ldi	r24, 0x30	; 48
 792:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 794:	77 9b       	sbis	0x0e, 7	; 14
 796:	fe cf       	rjmp	.-4      	; 0x794 <lcd_init+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 798:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 79c:	88 60       	ori	r24, 0x08	; 8
 79e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7a2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7a6:	87 7f       	andi	r24, 0xF7	; 247
 7a8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7ac:	8f e5       	ldi	r24, 0x5F	; 95
 7ae:	9d e6       	ldi	r25, 0x6D	; 109
 7b0:	01 97       	sbiw	r24, 0x01	; 1
 7b2:	f1 f7       	brne	.-4      	; 0x7b0 <lcd_init+0x94>
 7b4:	00 c0       	rjmp	.+0      	; 0x7b6 <lcd_init+0x9a>
 7b6:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 7b8:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 7ba:	77 9b       	sbis	0x0e, 7	; 14
 7bc:	fe cf       	rjmp	.-4      	; 0x7ba <lcd_init+0x9e>
  SPDR = byte;                        //send payload
 7be:	88 e3       	ldi	r24, 0x38	; 56
 7c0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 7c2:	77 9b       	sbis	0x0e, 7	; 14
 7c4:	fe cf       	rjmp	.-4      	; 0x7c2 <lcd_init+0xa6>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 7c6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7ca:	88 60       	ori	r24, 0x08	; 8
 7cc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7d0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7d4:	87 7f       	andi	r24, 0xF7	; 247
 7d6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7da:	8f e1       	ldi	r24, 0x1F	; 31
 7dc:	9e e4       	ldi	r25, 0x4E	; 78
 7de:	01 97       	sbiw	r24, 0x01	; 1
 7e0:	f1 f7       	brne	.-4      	; 0x7de <lcd_init+0xc2>
 7e2:	00 c0       	rjmp	.+0      	; 0x7e4 <lcd_init+0xc8>
 7e4:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 7e6:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 7e8:	77 9b       	sbis	0x0e, 7	; 14
 7ea:	fe cf       	rjmp	.-4      	; 0x7e8 <lcd_init+0xcc>
  SPDR = byte;                        //send payload
 7ec:	88 e0       	ldi	r24, 0x08	; 8
 7ee:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 7f0:	77 9b       	sbis	0x0e, 7	; 14
 7f2:	fe cf       	rjmp	.-4      	; 0x7f0 <lcd_init+0xd4>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 7f4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7f8:	88 60       	ori	r24, 0x08	; 8
 7fa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7fe:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 802:	87 7f       	andi	r24, 0xF7	; 247
 804:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 808:	8f e1       	ldi	r24, 0x1F	; 31
 80a:	9e e4       	ldi	r25, 0x4E	; 78
 80c:	01 97       	sbiw	r24, 0x01	; 1
 80e:	f1 f7       	brne	.-4      	; 0x80c <lcd_init+0xf0>
 810:	00 c0       	rjmp	.+0      	; 0x812 <lcd_init+0xf6>
 812:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 814:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 816:	77 9b       	sbis	0x0e, 7	; 14
 818:	fe cf       	rjmp	.-4      	; 0x816 <lcd_init+0xfa>
  SPDR = byte;                        //send payload
 81a:	81 e0       	ldi	r24, 0x01	; 1
 81c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 81e:	77 9b       	sbis	0x0e, 7	; 14
 820:	fe cf       	rjmp	.-4      	; 0x81e <lcd_init+0x102>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 822:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 826:	88 60       	ori	r24, 0x08	; 8
 828:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 82c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 830:	87 7f       	andi	r24, 0xF7	; 247
 832:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 836:	8f e1       	ldi	r24, 0x1F	; 31
 838:	9e e4       	ldi	r25, 0x4E	; 78
 83a:	01 97       	sbiw	r24, 0x01	; 1
 83c:	f1 f7       	brne	.-4      	; 0x83a <lcd_init+0x11e>
 83e:	00 c0       	rjmp	.+0      	; 0x840 <lcd_init+0x124>
 840:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 842:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 844:	77 9b       	sbis	0x0e, 7	; 14
 846:	fe cf       	rjmp	.-4      	; 0x844 <lcd_init+0x128>
  SPDR = byte;                        //send payload
 848:	86 e0       	ldi	r24, 0x06	; 6
 84a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 84c:	77 9b       	sbis	0x0e, 7	; 14
 84e:	fe cf       	rjmp	.-4      	; 0x84c <lcd_init+0x130>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 850:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 854:	88 60       	ori	r24, 0x08	; 8
 856:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 85a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 85e:	87 7f       	andi	r24, 0xF7	; 247
 860:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 864:	8f e1       	ldi	r24, 0x1F	; 31
 866:	9e e4       	ldi	r25, 0x4E	; 78
 868:	01 97       	sbiw	r24, 0x01	; 1
 86a:	f1 f7       	brne	.-4      	; 0x868 <lcd_init+0x14c>
 86c:	00 c0       	rjmp	.+0      	; 0x86e <lcd_init+0x152>
 86e:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 870:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 872:	77 9b       	sbis	0x0e, 7	; 14
 874:	fe cf       	rjmp	.-4      	; 0x872 <lcd_init+0x156>
  SPDR = byte;                        //send payload
 876:	8c e0       	ldi	r24, 0x0C	; 12
 878:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 87a:	77 9b       	sbis	0x0e, 7	; 14
 87c:	fe cf       	rjmp	.-4      	; 0x87a <lcd_init+0x15e>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 87e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 882:	88 60       	ori	r24, 0x08	; 8
 884:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 888:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 88c:	87 7f       	andi	r24, 0xF7	; 247
 88e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 892:	8f e1       	ldi	r24, 0x1F	; 31
 894:	9e e4       	ldi	r25, 0x4E	; 78
 896:	01 97       	sbiw	r24, 0x01	; 1
 898:	f1 f7       	brne	.-4      	; 0x896 <lcd_init+0x17a>
 89a:	00 c0       	rjmp	.+0      	; 0x89c <lcd_init+0x180>
 89c:	00 00       	nop
 89e:	08 95       	ret

000008a0 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
 8a0:	4f 92       	push	r4
 8a2:	5f 92       	push	r5
 8a4:	6f 92       	push	r6
 8a6:	7f 92       	push	r7
 8a8:	8f 92       	push	r8
 8aa:	9f 92       	push	r9
 8ac:	af 92       	push	r10
 8ae:	bf 92       	push	r11
 8b0:	cf 92       	push	r12
 8b2:	df 92       	push	r13
 8b4:	ef 92       	push	r14
 8b6:	ff 92       	push	r15
 8b8:	0f 93       	push	r16
 8ba:	1f 93       	push	r17
 8bc:	cf 93       	push	r28
 8be:	df 93       	push	r29
 8c0:	cd b7       	in	r28, 0x3d	; 61
 8c2:	de b7       	in	r29, 0x3e	; 62
 8c4:	69 97       	sbiw	r28, 0x19	; 25
 8c6:	0f b6       	in	r0, 0x3f	; 63
 8c8:	f8 94       	cli
 8ca:	de bf       	out	0x3e, r29	; 62
 8cc:	0f be       	out	0x3f, r0	; 63
 8ce:	cd bf       	out	0x3d, r28	; 61
 8d0:	14 2f       	mov	r17, r20
 8d2:	42 2e       	mov	r4, r18
 8d4:	5e 2c       	mov	r5, r14
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
 8d6:	00 23       	and	r16, r16
 8d8:	79 f0       	breq	.+30     	; 0x8f8 <lcd_int32+0x58>
        bSigned = (qr.quot<0);
 8da:	6b 01       	movw	r12, r22
 8dc:	7c 01       	movw	r14, r24
 8de:	cc 24       	eor	r12, r12
 8e0:	f7 fc       	sbrc	r15, 7
 8e2:	c3 94       	inc	r12
 8e4:	dd 24       	eor	r13, r13
 8e6:	ee 24       	eor	r14, r14
 8e8:	ff 24       	eor	r15, r15
 8ea:	0c 2d       	mov	r16, r12
        qr.quot = labs(qr.quot);
 8ec:	6b 01       	movw	r12, r22
 8ee:	7c 01       	movw	r14, r24
 8f0:	97 fd       	sbrc	r25, 7
 8f2:	a3 c0       	rjmp	.+326    	; 0xa3a <lcd_int32+0x19a>
 8f4:	c7 01       	movw	r24, r14
 8f6:	b6 01       	movw	r22, r12
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
 8f8:	44 20       	and	r4, r4
 8fa:	09 f4       	brne	.+2      	; 0x8fe <lcd_int32+0x5e>
 8fc:	96 c0       	rjmp	.+300    	; 0xa2a <lcd_int32+0x18a>
 8fe:	9e 01       	movw	r18, r28
 900:	2f 5f       	subi	r18, 0xFF	; 255
 902:	3f 4f       	sbci	r19, 0xFF	; 255
 904:	59 01       	movw	r10, r18
 906:	49 01       	movw	r8, r18
 908:	66 24       	eor	r6, r6
 90a:	6a 94       	dec	r6
 90c:	64 0c       	add	r6, r4
 90e:	71 2c       	mov	r7, r1
 910:	3f ef       	ldi	r19, 0xFF	; 255
 912:	63 1a       	sub	r6, r19
 914:	73 0a       	sbc	r7, r19
 916:	6a 0c       	add	r6, r10
 918:	7b 1c       	adc	r7, r11
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
 91a:	2a e0       	ldi	r18, 0x0A	; 10
 91c:	30 e0       	ldi	r19, 0x00	; 0
 91e:	40 e0       	ldi	r20, 0x00	; 0
 920:	50 e0       	ldi	r21, 0x00	; 0
 922:	0e 94 07 07 	call	0xe0e	; 0xe0e <__divmodsi4>
 926:	e6 2f       	mov	r30, r22
 928:	2a 8b       	std	Y+18, r18	; 0x12
 92a:	3b 8b       	std	Y+19, r19	; 0x13
 92c:	4c 8b       	std	Y+20, r20	; 0x14
 92e:	5d 8b       	std	Y+21, r21	; 0x15
 930:	6a 89       	ldd	r22, Y+18	; 0x12
 932:	7b 89       	ldd	r23, Y+19	; 0x13
 934:	8c 89       	ldd	r24, Y+20	; 0x14
 936:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
 938:	20 e3       	ldi	r18, 0x30	; 48
 93a:	2e 0f       	add	r18, r30
 93c:	f4 01       	movw	r30, r8
 93e:	21 93       	st	Z+, r18
 940:	4f 01       	movw	r8, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
 942:	6e 16       	cp	r6, r30
 944:	7f 06       	cpc	r7, r31
 946:	49 f7       	brne	.-46     	; 0x91a <lcd_int32+0x7a>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
 948:	99 24       	eor	r9, r9
 94a:	93 94       	inc	r9
 94c:	94 0c       	add	r9, r4
 94e:	f5 01       	movw	r30, r10
 950:	e4 0d       	add	r30, r4
 952:	f1 1d       	adc	r31, r1
 954:	2e e2       	ldi	r18, 0x2E	; 46
 956:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
 958:	2a e0       	ldi	r18, 0x0A	; 10
 95a:	30 e0       	ldi	r19, 0x00	; 0
 95c:	40 e0       	ldi	r20, 0x00	; 0
 95e:	50 e0       	ldi	r21, 0x00	; 0
 960:	0e 94 07 07 	call	0xe0e	; 0xe0e <__divmodsi4>
 964:	e6 2f       	mov	r30, r22
 966:	2a 8b       	std	Y+18, r18	; 0x12
 968:	3b 8b       	std	Y+19, r19	; 0x13
 96a:	4c 8b       	std	Y+20, r20	; 0x14
 96c:	5d 8b       	std	Y+21, r21	; 0x15
 96e:	6e 8b       	std	Y+22, r22	; 0x16
 970:	7f 8b       	std	Y+23, r23	; 0x17
 972:	88 8f       	std	Y+24, r24	; 0x18
 974:	99 8f       	std	Y+25, r25	; 0x19
 976:	6a 89       	ldd	r22, Y+18	; 0x12
 978:	7b 89       	ldd	r23, Y+19	; 0x13
 97a:	8c 89       	ldd	r24, Y+20	; 0x14
 97c:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
 97e:	31 e0       	ldi	r19, 0x01	; 1
 980:	39 0d       	add	r19, r9
 982:	d5 01       	movw	r26, r10
 984:	a9 0d       	add	r26, r9
 986:	b1 1d       	adc	r27, r1
 988:	e0 5d       	subi	r30, 0xD0	; 208
 98a:	ec 93       	st	X, r30
 98c:	93 2e       	mov	r9, r19
        }while(qr.quot);
 98e:	61 15       	cp	r22, r1
 990:	71 05       	cpc	r23, r1
 992:	81 05       	cpc	r24, r1
 994:	91 05       	cpc	r25, r1
 996:	01 f7       	brne	.-64     	; 0x958 <lcd_int32+0xb8>

      // fill the whole field if a width was specified
      if (fieldwidth){
 998:	11 23       	and	r17, r17
 99a:	61 f0       	breq	.+24     	; 0x9b4 <lcd_int32+0x114>
        fillch = bZeroFill? '0': ' '; // determine the fill character
 99c:	51 10       	cpse	r5, r1
 99e:	4b c0       	rjmp	.+150    	; 0xa36 <lcd_int32+0x196>
 9a0:	90 e2       	ldi	r25, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
 9a2:	31 17       	cp	r19, r17
 9a4:	38 f4       	brcc	.+14     	; 0x9b4 <lcd_int32+0x114>
 9a6:	f5 01       	movw	r30, r10
 9a8:	e3 0f       	add	r30, r19
 9aa:	f1 1d       	adc	r31, r1
 9ac:	90 83       	st	Z, r25
 9ae:	3f 5f       	subi	r19, 0xFF	; 255
 9b0:	13 13       	cpse	r17, r19
 9b2:	f9 cf       	rjmp	.-14     	; 0x9a6 <lcd_int32+0x106>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
 9b4:	00 23       	and	r16, r16
 9b6:	31 f0       	breq	.+12     	; 0x9c4 <lcd_int32+0x124>
 9b8:	f5 01       	movw	r30, r10
 9ba:	e3 0f       	add	r30, r19
 9bc:	f1 1d       	adc	r31, r1
 9be:	9d e2       	ldi	r25, 0x2D	; 45
 9c0:	90 83       	st	Z, r25
 9c2:	3f 5f       	subi	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 9c4:	21 e0       	ldi	r18, 0x01	; 1

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
 9c6:	31 50       	subi	r19, 0x01	; 1
 9c8:	f5 01       	movw	r30, r10
 9ca:	e3 0f       	add	r30, r19
 9cc:	f1 1d       	adc	r31, r1
 9ce:	90 81       	ld	r25, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 9d0:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 9d2:	77 9b       	sbis	0x0e, 7	; 14
 9d4:	fe cf       	rjmp	.-4      	; 0x9d2 <lcd_int32+0x132>
  SPDR = byte;                        //send payload
 9d6:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 9d8:	77 9b       	sbis	0x0e, 7	; 14
 9da:	fe cf       	rjmp	.-4      	; 0x9d8 <lcd_int32+0x138>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 9dc:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 9e0:	98 60       	ori	r25, 0x08	; 8
 9e2:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 9e6:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 9ea:	97 7f       	andi	r25, 0xF7	; 247
 9ec:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 9f0:	85 ed       	ldi	r24, 0xD5	; 213
 9f2:	8a 95       	dec	r24
 9f4:	f1 f7       	brne	.-4      	; 0x9f2 <lcd_int32+0x152>
 9f6:	00 00       	nop

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
 9f8:	31 11       	cpse	r19, r1
 9fa:	e5 cf       	rjmp	.-54     	; 0x9c6 <lcd_int32+0x126>

}
 9fc:	69 96       	adiw	r28, 0x19	; 25
 9fe:	0f b6       	in	r0, 0x3f	; 63
 a00:	f8 94       	cli
 a02:	de bf       	out	0x3e, r29	; 62
 a04:	0f be       	out	0x3f, r0	; 63
 a06:	cd bf       	out	0x3d, r28	; 61
 a08:	df 91       	pop	r29
 a0a:	cf 91       	pop	r28
 a0c:	1f 91       	pop	r17
 a0e:	0f 91       	pop	r16
 a10:	ff 90       	pop	r15
 a12:	ef 90       	pop	r14
 a14:	df 90       	pop	r13
 a16:	cf 90       	pop	r12
 a18:	bf 90       	pop	r11
 a1a:	af 90       	pop	r10
 a1c:	9f 90       	pop	r9
 a1e:	8f 90       	pop	r8
 a20:	7f 90       	pop	r7
 a22:	6f 90       	pop	r6
 a24:	5f 90       	pop	r5
 a26:	4f 90       	pop	r4
 a28:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
 a2a:	91 2c       	mov	r9, r1
 a2c:	9e 01       	movw	r18, r28
 a2e:	2f 5f       	subi	r18, 0xFF	; 255
 a30:	3f 4f       	sbci	r19, 0xFF	; 255
 a32:	59 01       	movw	r10, r18
 a34:	91 cf       	rjmp	.-222    	; 0x958 <lcd_int32+0xb8>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
 a36:	90 e3       	ldi	r25, 0x30	; 48
 a38:	b4 cf       	rjmp	.-152    	; 0x9a2 <lcd_int32+0x102>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
 a3a:	f0 94       	com	r15
 a3c:	e0 94       	com	r14
 a3e:	d0 94       	com	r13
 a40:	c0 94       	com	r12
 a42:	c1 1c       	adc	r12, r1
 a44:	d1 1c       	adc	r13, r1
 a46:	e1 1c       	adc	r14, r1
 a48:	f1 1c       	adc	r15, r1
 a4a:	54 cf       	rjmp	.-344    	; 0x8f4 <lcd_int32+0x54>

00000a4c <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l, 
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
 a4c:	5f 92       	push	r5
 a4e:	6f 92       	push	r6
 a50:	7f 92       	push	r7
 a52:	8f 92       	push	r8
 a54:	9f 92       	push	r9
 a56:	af 92       	push	r10
 a58:	bf 92       	push	r11
 a5a:	cf 92       	push	r12
 a5c:	df 92       	push	r13
 a5e:	ef 92       	push	r14
 a60:	ff 92       	push	r15
 a62:	0f 93       	push	r16
 a64:	1f 93       	push	r17
 a66:	cf 93       	push	r28
 a68:	df 93       	push	r29
 a6a:	cd b7       	in	r28, 0x3d	; 61
 a6c:	de b7       	in	r29, 0x3e	; 62
 a6e:	61 97       	sbiw	r28, 0x11	; 17
 a70:	0f b6       	in	r0, 0x3f	; 63
 a72:	f8 94       	cli
 a74:	de bf       	out	0x3e, r29	; 62
 a76:	0f be       	out	0x3f, r0	; 63
 a78:	cd bf       	out	0x3d, r28	; 61
 a7a:	5c 01       	movw	r10, r24
 a7c:	96 2e       	mov	r9, r22
 a7e:	54 2e       	mov	r5, r20
 a80:	62 2e       	mov	r6, r18
        uint8_t bSigned;

        // initialize the quotient 
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
 a82:	8b 2c       	mov	r8, r11
 a84:	88 1c       	adc	r8, r8
 a86:	88 24       	eor	r8, r8
 a88:	88 1c       	adc	r8, r8
 a8a:	78 2c       	mov	r7, r8
 a8c:	9c 01       	movw	r18, r24
 a8e:	97 fd       	sbrc	r25, 7
 a90:	9d c0       	rjmp	.+314    	; 0xbcc <lcd_int16+0x180>
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
 a92:	55 20       	and	r5, r5
 a94:	09 f4       	brne	.+2      	; 0xa98 <lcd_int16+0x4c>
 a96:	8e c0       	rjmp	.+284    	; 0xbb4 <lcd_int16+0x168>
 a98:	8e 01       	movw	r16, r28
 a9a:	0f 5f       	subi	r16, 0xFF	; 255
 a9c:	1f 4f       	sbci	r17, 0xFF	; 255
 a9e:	78 01       	movw	r14, r16
 aa0:	cc 24       	eor	r12, r12
 aa2:	ca 94       	dec	r12
 aa4:	c5 0c       	add	r12, r5
 aa6:	d1 2c       	mov	r13, r1
 aa8:	8f ef       	ldi	r24, 0xFF	; 255
 aaa:	c8 1a       	sub	r12, r24
 aac:	d8 0a       	sbc	r13, r24
 aae:	c0 0e       	add	r12, r16
 ab0:	d1 1e       	adc	r13, r17
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
 ab2:	6a e0       	ldi	r22, 0x0A	; 10
 ab4:	70 e0       	ldi	r23, 0x00	; 0
 ab6:	c9 01       	movw	r24, r18
 ab8:	0e 94 f3 06 	call	0xde6	; 0xde6 <__divmodhi4>
 abc:	46 2f       	mov	r20, r22
 abe:	24 2f       	mov	r18, r20
 ac0:	37 2f       	mov	r19, r23
            sline[i++] = qr.rem + '0';
 ac2:	80 5d       	subi	r24, 0xD0	; 208
 ac4:	f7 01       	movw	r30, r14
 ac6:	81 93       	st	Z+, r24
 ac8:	7f 01       	movw	r14, r30
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
          for (; decpos ; decpos--){
 aca:	ec 15       	cp	r30, r12
 acc:	fd 05       	cpc	r31, r13
 ace:	89 f7       	brne	.-30     	; 0xab2 <lcd_int16+0x66>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
 ad0:	ff 24       	eor	r15, r15
 ad2:	f3 94       	inc	r15
 ad4:	f5 0c       	add	r15, r5
 ad6:	f8 01       	movw	r30, r16
 ad8:	e5 0d       	add	r30, r5
 ada:	f1 1d       	adc	r31, r1
 adc:	8e e2       	ldi	r24, 0x2E	; 46
 ade:	80 83       	st	Z, r24
 ae0:	01 c0       	rjmp	.+2      	; 0xae4 <lcd_int16+0x98>

        // convert the digits to the left of the decimal point 
        do
        {
                qr = div(qr.quot, 10);
                sline[i++] = qr.rem + '0';
 ae2:	f9 2e       	mov	r15, r25
        }

        // convert the digits to the left of the decimal point 
        do
        {
                qr = div(qr.quot, 10);
 ae4:	6a e0       	ldi	r22, 0x0A	; 10
 ae6:	70 e0       	ldi	r23, 0x00	; 0
 ae8:	c9 01       	movw	r24, r18
 aea:	0e 94 f3 06 	call	0xde6	; 0xde6 <__divmodhi4>
 aee:	46 2f       	mov	r20, r22
 af0:	24 2f       	mov	r18, r20
 af2:	37 2f       	mov	r19, r23
                sline[i++] = qr.rem + '0';
 af4:	91 e0       	ldi	r25, 0x01	; 1
 af6:	9f 0d       	add	r25, r15
 af8:	f8 01       	movw	r30, r16
 afa:	ef 0d       	add	r30, r15
 afc:	f1 1d       	adc	r31, r1
 afe:	80 5d       	subi	r24, 0xD0	; 208
 b00:	80 83       	st	Z, r24
        }
        while(qr.quot);
 b02:	21 15       	cp	r18, r1
 b04:	31 05       	cpc	r19, r1
 b06:	69 f7       	brne	.-38     	; 0xae2 <lcd_int16+0x96>

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
 b08:	61 10       	cpse	r6, r1
 b0a:	59 c0       	rjmp	.+178    	; 0xbbe <lcd_int16+0x172>
 b0c:	b7 fc       	sbrc	r11, 7
 b0e:	63 c0       	rjmp	.+198    	; 0xbd6 <lcd_int16+0x18a>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
 b10:	99 20       	and	r9, r9
 b12:	b1 f0       	breq	.+44     	; 0xb40 <lcd_int16+0xf4>
 b14:	68 2d       	mov	r22, r8
 b16:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
 b18:	80 e2       	ldi	r24, 0x20	; 32
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
 b1a:	29 2f       	mov	r18, r25
 b1c:	30 e0       	ldi	r19, 0x00	; 0
 b1e:	49 2d       	mov	r20, r9
 b20:	50 e0       	ldi	r21, 0x00	; 0
 b22:	46 1b       	sub	r20, r22
 b24:	57 0b       	sbc	r21, r23
 b26:	24 17       	cp	r18, r20
 b28:	35 07       	cpc	r19, r21
 b2a:	54 f4       	brge	.+20     	; 0xb40 <lcd_int16+0xf4>
 b2c:	9f 5f       	subi	r25, 0xFF	; 255
 b2e:	f8 01       	movw	r30, r16
 b30:	e2 0f       	add	r30, r18
 b32:	f3 1f       	adc	r31, r19
 b34:	80 83       	st	Z, r24
 b36:	29 2f       	mov	r18, r25
 b38:	30 e0       	ldi	r19, 0x00	; 0
 b3a:	24 17       	cp	r18, r20
 b3c:	35 07       	cpc	r19, r21
 b3e:	b4 f3       	brlt	.-20     	; 0xb2c <lcd_int16+0xe0>
        }

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}
 b40:	77 20       	and	r7, r7
 b42:	31 f0       	breq	.+12     	; 0xb50 <lcd_int16+0x104>
 b44:	f8 01       	movw	r30, r16
 b46:	e9 0f       	add	r30, r25
 b48:	f1 1d       	adc	r31, r1
 b4a:	8d e2       	ldi	r24, 0x2D	; 45
 b4c:	80 83       	st	Z, r24
 b4e:	9f 5f       	subi	r25, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 b50:	21 e0       	ldi	r18, 0x01	; 1

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number 
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
 b52:	91 50       	subi	r25, 0x01	; 1
 b54:	f8 01       	movw	r30, r16
 b56:	e9 0f       	add	r30, r25
 b58:	f1 1d       	adc	r31, r1
 b5a:	80 81       	ld	r24, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 b5c:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 b5e:	77 9b       	sbis	0x0e, 7	; 14
 b60:	fe cf       	rjmp	.-4      	; 0xb5e <lcd_int16+0x112>
  SPDR = byte;                        //send payload
 b62:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 b64:	77 9b       	sbis	0x0e, 7	; 14
 b66:	fe cf       	rjmp	.-4      	; 0xb64 <lcd_int16+0x118>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 b68:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 b6c:	88 60       	ori	r24, 0x08	; 8
 b6e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 b72:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 b76:	87 7f       	andi	r24, 0xF7	; 247
 b78:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 b7c:	f5 ed       	ldi	r31, 0xD5	; 213
 b7e:	fa 95       	dec	r31
 b80:	f1 f7       	brne	.-4      	; 0xb7e <lcd_int16+0x132>
 b82:	00 00       	nop

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number 
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
 b84:	91 11       	cpse	r25, r1
 b86:	e5 cf       	rjmp	.-54     	; 0xb52 <lcd_int16+0x106>
}
 b88:	61 96       	adiw	r28, 0x11	; 17
 b8a:	0f b6       	in	r0, 0x3f	; 63
 b8c:	f8 94       	cli
 b8e:	de bf       	out	0x3e, r29	; 62
 b90:	0f be       	out	0x3f, r0	; 63
 b92:	cd bf       	out	0x3d, r28	; 61
 b94:	df 91       	pop	r29
 b96:	cf 91       	pop	r28
 b98:	1f 91       	pop	r17
 b9a:	0f 91       	pop	r16
 b9c:	ff 90       	pop	r15
 b9e:	ef 90       	pop	r14
 ba0:	df 90       	pop	r13
 ba2:	cf 90       	pop	r12
 ba4:	bf 90       	pop	r11
 ba6:	af 90       	pop	r10
 ba8:	9f 90       	pop	r9
 baa:	8f 90       	pop	r8
 bac:	7f 90       	pop	r7
 bae:	6f 90       	pop	r6
 bb0:	5f 90       	pop	r5
 bb2:	08 95       	ret
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
 bb4:	f1 2c       	mov	r15, r1
 bb6:	8e 01       	movw	r16, r28
 bb8:	0f 5f       	subi	r16, 0xFF	; 255
 bba:	1f 4f       	sbci	r17, 0xFF	; 255
 bbc:	93 cf       	rjmp	.-218    	; 0xae4 <lcd_int16+0x98>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
 bbe:	99 20       	and	r9, r9
 bc0:	09 f4       	brne	.+2      	; 0xbc4 <lcd_int16+0x178>
 bc2:	be cf       	rjmp	.-132    	; 0xb40 <lcd_int16+0xf4>
 bc4:	68 2d       	mov	r22, r8
 bc6:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
 bc8:	80 e3       	ldi	r24, 0x30	; 48
 bca:	a7 cf       	rjmp	.-178    	; 0xb1a <lcd_int16+0xce>
 bcc:	22 27       	eor	r18, r18
 bce:	33 27       	eor	r19, r19
 bd0:	28 1b       	sub	r18, r24
 bd2:	39 0b       	sbc	r19, r25
 bd4:	5e cf       	rjmp	.-324    	; 0xa92 <lcd_int16+0x46>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
 bd6:	f3 94       	inc	r15
 bd8:	f3 94       	inc	r15
 bda:	f8 01       	movw	r30, r16
 bdc:	e9 0f       	add	r30, r25
 bde:	f1 1d       	adc	r31, r1
 be0:	8d e2       	ldi	r24, 0x2D	; 45
 be2:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
 be4:	99 20       	and	r9, r9
 be6:	59 f0       	breq	.+22     	; 0xbfe <lcd_int16+0x1b2>
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
 be8:	2f 2d       	mov	r18, r15
 bea:	30 e0       	ldi	r19, 0x00	; 0
 bec:	49 2d       	mov	r20, r9
 bee:	50 e0       	ldi	r21, 0x00	; 0
 bf0:	24 17       	cp	r18, r20
 bf2:	35 07       	cpc	r19, r21
 bf4:	24 f4       	brge	.+8      	; 0xbfe <lcd_int16+0x1b2>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
 bf6:	9f 2d       	mov	r25, r15
                bSigned = 0;
 bf8:	71 2c       	mov	r7, r1
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
 bfa:	80 e2       	ldi	r24, 0x20	; 32
 bfc:	97 cf       	rjmp	.-210    	; 0xb2c <lcd_int16+0xe0>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
 bfe:	9f 2d       	mov	r25, r15
 c00:	a7 cf       	rjmp	.-178    	; 0xb50 <lcd_int16+0x104>

00000c02 <__vector_33>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
 c02:	1f 92       	push	r1
 c04:	0f 92       	push	r0
 c06:	0f b6       	in	r0, 0x3f	; 63
 c08:	0f 92       	push	r0
 c0a:	11 24       	eor	r1, r1
 c0c:	0b b6       	in	r0, 0x3b	; 59
 c0e:	0f 92       	push	r0
 c10:	2f 93       	push	r18
 c12:	3f 93       	push	r19
 c14:	8f 93       	push	r24
 c16:	9f 93       	push	r25
 c18:	af 93       	push	r26
 c1a:	bf 93       	push	r27
 c1c:	ef 93       	push	r30
 c1e:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
 c20:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 c24:	8e 2f       	mov	r24, r30
 c26:	90 e0       	ldi	r25, 0x00	; 0
 c28:	fc 01       	movw	r30, r24
 c2a:	38 97       	sbiw	r30, 0x08	; 8
 c2c:	e1 35       	cpi	r30, 0x51	; 81
 c2e:	f1 05       	cpc	r31, r1
 c30:	b0 f0       	brcs	.+44     	; 0xc5e <__vector_33+0x5c>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
 c32:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 c36:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <twi_state>
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
 c3a:	84 e0       	ldi	r24, 0x04	; 4
 c3c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  }//switch
}//TWI_isr
 c40:	ff 91       	pop	r31
 c42:	ef 91       	pop	r30
 c44:	bf 91       	pop	r27
 c46:	af 91       	pop	r26
 c48:	9f 91       	pop	r25
 c4a:	8f 91       	pop	r24
 c4c:	3f 91       	pop	r19
 c4e:	2f 91       	pop	r18
 c50:	0f 90       	pop	r0
 c52:	0b be       	out	0x3b, r0	; 59
 c54:	0f 90       	pop	r0
 c56:	0f be       	out	0x3f, r0	; 63
 c58:	0f 90       	pop	r0
 c5a:	1f 90       	pop	r1
 c5c:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
 c5e:	ea 5b       	subi	r30, 0xBA	; 186
 c60:	ff 4f       	sbci	r31, 0xFF	; 255
 c62:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__tablejump2__>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
 c66:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <twi_buf_ptr.1780>
 c6a:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <twi_buf>
 c6e:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <twi_buf+0x1>
 c72:	e8 0f       	add	r30, r24
 c74:	f1 1d       	adc	r31, r1
 c76:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 c7a:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
 c7c:	84 e9       	ldi	r24, 0x94	; 148
 c7e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;      
 c82:	de cf       	rjmp	.-68     	; 0xc40 <__vector_33+0x3e>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
 c84:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <twi_bus_addr>
 c88:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
      twi_buf_ptr = 0;      //initalize buffer pointer 
 c8c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <twi_buf_ptr.1780>
      TWCR = TWCR_SEND;     //send SLA+RW
 c90:	85 e8       	ldi	r24, 0x85	; 133
 c92:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;
 c96:	d4 cf       	rjmp	.-88     	; 0xc40 <__vector_33+0x3e>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
 c98:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <twi_buf_ptr.1780>
 c9c:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <twi_msg_size>
 ca0:	89 17       	cp	r24, r25
 ca2:	60 f7       	brcc	.-40     	; 0xc7c <__vector_33+0x7a>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
 ca4:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <twi_buf>
 ca8:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <twi_buf+0x1>
 cac:	91 e0       	ldi	r25, 0x01	; 1
 cae:	98 0f       	add	r25, r24
 cb0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <twi_buf_ptr.1780>
 cb4:	e8 0f       	add	r30, r24
 cb6:	f1 1d       	adc	r31, r1
 cb8:	80 81       	ld	r24, Z
 cba:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
        TWCR = TWCR_SEND;               //send next byte 
 cbe:	85 e8       	ldi	r24, 0x85	; 133
 cc0:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 cc4:	bd cf       	rjmp	.-134    	; 0xc40 <__vector_33+0x3e>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
 cc6:	85 ea       	ldi	r24, 0xA5	; 165
 cc8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;
 ccc:	b9 cf       	rjmp	.-142    	; 0xc40 <__vector_33+0x3e>
 cce:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <twi_buf_ptr.1780>
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
 cd2:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <twi_msg_size>
 cd6:	30 e0       	ldi	r19, 0x00	; 0
 cd8:	90 e0       	ldi	r25, 0x00	; 0
 cda:	01 97       	sbiw	r24, 0x01	; 1
 cdc:	28 17       	cp	r18, r24
 cde:	39 07       	cpc	r19, r25
 ce0:	dc f4       	brge	.+54     	; 0xd18 <__vector_33+0x116>
 ce2:	85 ec       	ldi	r24, 0xC5	; 197
 ce4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 ce8:	ab cf       	rjmp	.-170    	; 0xc40 <__vector_33+0x3e>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
 cea:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <twi_buf>
 cee:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <twi_buf+0x1>
 cf2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <twi_buf_ptr.1780>
 cf6:	21 e0       	ldi	r18, 0x01	; 1
 cf8:	28 0f       	add	r18, r24
 cfa:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <twi_buf_ptr.1780>
 cfe:	e8 0f       	add	r30, r24
 d00:	f1 1d       	adc	r31, r1
 d02:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 d06:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
 d08:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <twi_msg_size>
 d0c:	30 e0       	ldi	r19, 0x00	; 0
 d0e:	90 e0       	ldi	r25, 0x00	; 0
 d10:	01 97       	sbiw	r24, 0x01	; 1
 d12:	28 17       	cp	r18, r24
 d14:	39 07       	cpc	r19, r25
 d16:	2c f3       	brlt	.-54     	; 0xce2 <__vector_33+0xe0>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
 d18:	85 e8       	ldi	r24, 0x85	; 133
 d1a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 d1e:	90 cf       	rjmp	.-224    	; 0xc40 <__vector_33+0x3e>

00000d20 <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 d20:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
}
 d24:	81 70       	andi	r24, 0x01	; 1
 d26:	08 95       	ret

00000d28 <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 d28:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
 d2c:	90 fd       	sbrc	r25, 0
 d2e:	fc cf       	rjmp	.-8      	; 0xd28 <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
 d30:	8e 7f       	andi	r24, 0xFE	; 254
 d32:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <twi_bus_addr>
  twi_buf = twi_data;                   //load pointer to write buffer
 d36:	70 93 ef 01 	sts	0x01EF, r23	; 0x8001ef <twi_buf+0x1>
 d3a:	60 93 ee 01 	sts	0x01EE, r22	; 0x8001ee <twi_buf>
  twi_msg_size = byte_cnt;              //load size of xfer 
 d3e:	40 93 f1 01 	sts	0x01F1, r20	; 0x8001f1 <twi_msg_size>
  TWCR = TWCR_START;                    //initiate START
 d42:	85 ea       	ldi	r24, 0xA5	; 165
 d44:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 d48:	08 95       	ret

00000d4a <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 d4a:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
 d4e:	90 fd       	sbrc	r25, 0
 d50:	fc cf       	rjmp	.-8      	; 0xd4a <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
 d52:	81 60       	ori	r24, 0x01	; 1
 d54:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <twi_bus_addr>
  twi_buf = twi_data;                  //load pointer to write buffer
 d58:	70 93 ef 01 	sts	0x01EF, r23	; 0x8001ef <twi_buf+0x1>
 d5c:	60 93 ee 01 	sts	0x01EE, r22	; 0x8001ee <twi_buf>
  twi_msg_size = byte_cnt;             //load size of xfer 
 d60:	40 93 f1 01 	sts	0x01F1, r20	; 0x8001f1 <twi_msg_size>
  TWCR = TWCR_START;                   //initiate START
 d64:	85 ea       	ldi	r24, 0xA5	; 165
 d66:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 d6a:	08 95       	ret

00000d6c <init_twi>:
//10K pullups are present on the board
//For the alarm clock an additional 4.7K resistor is also there for pullup
//******************************************************************************

void init_twi(){
  TWDR = 0xFF;     //release SDA, default contents
 d6c:	8f ef       	ldi	r24, 0xFF	; 255
 d6e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
  TWSR = 0x00;     //prescaler value = 1
 d72:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
  TWBR = TWI_TWBR; //defined in twi_master.h 
 d76:	8c e0       	ldi	r24, 0x0C	; 12
 d78:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 d7c:	08 95       	ret

00000d7e <main>:
  SPSR  |= (1<<SPI2X);            //run at double speed 
}//spi_init    

int main()
{
  DDRF |= 0x08; //lcd strobe bit
 d7e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 d82:	88 60       	ori	r24, 0x08	; 8
 d84:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
  uart_init();  //RCV INTERUPT ENABLED
 d88:	0e 94 22 01 	call	0x244	; 0x244 <uart_init>
char              lcd_str_array[16];  //holds string to send to lcd
uint8_t           send_seq=0;         //transmit sequence number
char              lcd_string[3];      //holds value of sequence number

void spi_init(void){
  DDRB   = DDRB | 0x07;           //Turn on SS, MOSI, SCLK pins
 d8c:	87 b3       	in	r24, 0x17	; 23
 d8e:	87 60       	ori	r24, 0x07	; 7
 d90:	87 bb       	out	0x17, r24	; 23
  SPCR  |= (1<<SPE) | (1<<MSTR);  //set up SPI mode
 d92:	8d b1       	in	r24, 0x0d	; 13
 d94:	80 65       	ori	r24, 0x50	; 80
 d96:	8d b9       	out	0x0d, r24	; 13
  SPSR  |= (1<<SPI2X);            //run at double speed 
 d98:	70 9a       	sbi	0x0e, 0	; 14
int main()
{
  DDRF |= 0x08; //lcd strobe bit
  uart_init();  //RCV INTERUPT ENABLED
  spi_init();
  lcd_init();
 d9a:	0e 94 8e 03 	call	0x71c	; 0x71c <lcd_init>
  clear_display();
 d9e:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <clear_display>
  cursor_home();
 da2:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <cursor_home>
  sei();
 da6:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 da8:	2f ef       	ldi	r18, 0xFF	; 255
 daa:	83 ed       	ldi	r24, 0xD3	; 211
 dac:	90 e3       	ldi	r25, 0x30	; 48
 dae:	21 50       	subi	r18, 0x01	; 1
 db0:	80 40       	sbci	r24, 0x00	; 0
 db2:	90 40       	sbci	r25, 0x00	; 0
 db4:	e1 f7       	brne	.-8      	; 0xdae <main+0x30>
 db6:	00 c0       	rjmp	.+0      	; 0xdb8 <main+0x3a>
 db8:	00 00       	nop

    	while(1)
    	{
		_delay_ms(1000);
		
		uart_putc('S');
 dba:	83 e5       	ldi	r24, 0x53	; 83
 dbc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <uart_putc>
 dc0:	8f e3       	ldi	r24, 0x3F	; 63
 dc2:	9c e9       	ldi	r25, 0x9C	; 156
 dc4:	01 97       	sbiw	r24, 0x01	; 1
 dc6:	f1 f7       	brne	.-4      	; 0xdc4 <main+0x46>
 dc8:	00 c0       	rjmp	.+0      	; 0xdca <main+0x4c>
 dca:	00 00       	nop

		_delay_ms(10);

		//Recieve 
		if(rcv_rdy == 1)
 dcc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <rcv_rdy>
 dd0:	81 30       	cpi	r24, 0x01	; 1
 dd2:	51 f7       	brne	.-44     	; 0xda8 <main+0x2a>
		{
			clear_display();
 dd4:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <clear_display>
			string2lcd(lcd_str_array); //send to lcd
 dd8:	88 e0       	ldi	r24, 0x08	; 8
 dda:	91 e0       	ldi	r25, 0x01	; 1
 ddc:	0e 94 61 03 	call	0x6c2	; 0x6c2 <string2lcd>
			rcv_rdy = 0; //reset recv flag
 de0:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <rcv_rdy>
 de4:	e1 cf       	rjmp	.-62     	; 0xda8 <main+0x2a>

00000de6 <__divmodhi4>:
 de6:	97 fb       	bst	r25, 7
 de8:	07 2e       	mov	r0, r23
 dea:	16 f4       	brtc	.+4      	; 0xdf0 <__divmodhi4+0xa>
 dec:	00 94       	com	r0
 dee:	07 d0       	rcall	.+14     	; 0xdfe <__divmodhi4_neg1>
 df0:	77 fd       	sbrc	r23, 7
 df2:	09 d0       	rcall	.+18     	; 0xe06 <__divmodhi4_neg2>
 df4:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__udivmodhi4>
 df8:	07 fc       	sbrc	r0, 7
 dfa:	05 d0       	rcall	.+10     	; 0xe06 <__divmodhi4_neg2>
 dfc:	3e f4       	brtc	.+14     	; 0xe0c <__divmodhi4_exit>

00000dfe <__divmodhi4_neg1>:
 dfe:	90 95       	com	r25
 e00:	81 95       	neg	r24
 e02:	9f 4f       	sbci	r25, 0xFF	; 255
 e04:	08 95       	ret

00000e06 <__divmodhi4_neg2>:
 e06:	70 95       	com	r23
 e08:	61 95       	neg	r22
 e0a:	7f 4f       	sbci	r23, 0xFF	; 255

00000e0c <__divmodhi4_exit>:
 e0c:	08 95       	ret

00000e0e <__divmodsi4>:
 e0e:	05 2e       	mov	r0, r21
 e10:	97 fb       	bst	r25, 7
 e12:	1e f4       	brtc	.+6      	; 0xe1a <__divmodsi4+0xc>
 e14:	00 94       	com	r0
 e16:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__negsi2>
 e1a:	57 fd       	sbrc	r21, 7
 e1c:	07 d0       	rcall	.+14     	; 0xe2c <__divmodsi4_neg2>
 e1e:	0e 94 43 07 	call	0xe86	; 0xe86 <__udivmodsi4>
 e22:	07 fc       	sbrc	r0, 7
 e24:	03 d0       	rcall	.+6      	; 0xe2c <__divmodsi4_neg2>
 e26:	4e f4       	brtc	.+18     	; 0xe3a <__divmodsi4_exit>
 e28:	0c 94 1e 07 	jmp	0xe3c	; 0xe3c <__negsi2>

00000e2c <__divmodsi4_neg2>:
 e2c:	50 95       	com	r21
 e2e:	40 95       	com	r20
 e30:	30 95       	com	r19
 e32:	21 95       	neg	r18
 e34:	3f 4f       	sbci	r19, 0xFF	; 255
 e36:	4f 4f       	sbci	r20, 0xFF	; 255
 e38:	5f 4f       	sbci	r21, 0xFF	; 255

00000e3a <__divmodsi4_exit>:
 e3a:	08 95       	ret

00000e3c <__negsi2>:
 e3c:	90 95       	com	r25
 e3e:	80 95       	com	r24
 e40:	70 95       	com	r23
 e42:	61 95       	neg	r22
 e44:	7f 4f       	sbci	r23, 0xFF	; 255
 e46:	8f 4f       	sbci	r24, 0xFF	; 255
 e48:	9f 4f       	sbci	r25, 0xFF	; 255
 e4a:	08 95       	ret

00000e4c <__tablejump2__>:
 e4c:	ee 0f       	add	r30, r30
 e4e:	ff 1f       	adc	r31, r31
 e50:	00 24       	eor	r0, r0
 e52:	00 1c       	adc	r0, r0
 e54:	0b be       	out	0x3b, r0	; 59
 e56:	07 90       	elpm	r0, Z+
 e58:	f6 91       	elpm	r31, Z
 e5a:	e0 2d       	mov	r30, r0
 e5c:	09 94       	ijmp

00000e5e <__udivmodhi4>:
 e5e:	aa 1b       	sub	r26, r26
 e60:	bb 1b       	sub	r27, r27
 e62:	51 e1       	ldi	r21, 0x11	; 17
 e64:	07 c0       	rjmp	.+14     	; 0xe74 <__udivmodhi4_ep>

00000e66 <__udivmodhi4_loop>:
 e66:	aa 1f       	adc	r26, r26
 e68:	bb 1f       	adc	r27, r27
 e6a:	a6 17       	cp	r26, r22
 e6c:	b7 07       	cpc	r27, r23
 e6e:	10 f0       	brcs	.+4      	; 0xe74 <__udivmodhi4_ep>
 e70:	a6 1b       	sub	r26, r22
 e72:	b7 0b       	sbc	r27, r23

00000e74 <__udivmodhi4_ep>:
 e74:	88 1f       	adc	r24, r24
 e76:	99 1f       	adc	r25, r25
 e78:	5a 95       	dec	r21
 e7a:	a9 f7       	brne	.-22     	; 0xe66 <__udivmodhi4_loop>
 e7c:	80 95       	com	r24
 e7e:	90 95       	com	r25
 e80:	bc 01       	movw	r22, r24
 e82:	cd 01       	movw	r24, r26
 e84:	08 95       	ret

00000e86 <__udivmodsi4>:
 e86:	a1 e2       	ldi	r26, 0x21	; 33
 e88:	1a 2e       	mov	r1, r26
 e8a:	aa 1b       	sub	r26, r26
 e8c:	bb 1b       	sub	r27, r27
 e8e:	fd 01       	movw	r30, r26
 e90:	0d c0       	rjmp	.+26     	; 0xeac <__udivmodsi4_ep>

00000e92 <__udivmodsi4_loop>:
 e92:	aa 1f       	adc	r26, r26
 e94:	bb 1f       	adc	r27, r27
 e96:	ee 1f       	adc	r30, r30
 e98:	ff 1f       	adc	r31, r31
 e9a:	a2 17       	cp	r26, r18
 e9c:	b3 07       	cpc	r27, r19
 e9e:	e4 07       	cpc	r30, r20
 ea0:	f5 07       	cpc	r31, r21
 ea2:	20 f0       	brcs	.+8      	; 0xeac <__udivmodsi4_ep>
 ea4:	a2 1b       	sub	r26, r18
 ea6:	b3 0b       	sbc	r27, r19
 ea8:	e4 0b       	sbc	r30, r20
 eaa:	f5 0b       	sbc	r31, r21

00000eac <__udivmodsi4_ep>:
 eac:	66 1f       	adc	r22, r22
 eae:	77 1f       	adc	r23, r23
 eb0:	88 1f       	adc	r24, r24
 eb2:	99 1f       	adc	r25, r25
 eb4:	1a 94       	dec	r1
 eb6:	69 f7       	brne	.-38     	; 0xe92 <__udivmodsi4_loop>
 eb8:	60 95       	com	r22
 eba:	70 95       	com	r23
 ebc:	80 95       	com	r24
 ebe:	90 95       	com	r25
 ec0:	9b 01       	movw	r18, r22
 ec2:	ac 01       	movw	r20, r24
 ec4:	bd 01       	movw	r22, r26
 ec6:	cf 01       	movw	r24, r30
 ec8:	08 95       	ret

00000eca <_exit>:
 eca:	f8 94       	cli

00000ecc <__stop_program>:
 ecc:	ff cf       	rjmp	.-2      	; 0xecc <__stop_program>
